//We merge the node to one set if they are connected so the number of sets will be equal to number of connected components. 
//Here to find number of connected componenets we can just scan through it to find the number of roots.
//The number of root nodes is equal to number of entries where parent[i] = i.

class Solution {
public:
    int find(vector<int>& parent, int i){
        if(parent[i] == i) return i;
        else return parent[i] = find(parent, parent[i]);
    }

    void Union(vector<int>& parent, vector<int>& rank, int i, int j){
        int currLeftSet = find(parent, i);
        int currRightSet = find(parent, j);

        if(currLeftSet == currRightSet) return ;

        if(rank[currLeftSet] < rank[currRightSet]) parent[currLeftSet] = currRightSet;
        else if(rank[currLeftSet] > rank[currRightSet]) parent[currRightSet] = currLeftSet;
        else{
            parent[currRightSet] = currLeftSet;
            rank[currLeftSet] = rank[currLeftSet]+ 1;
        }

    }

    int findCircleNum(vector<vector<int>>& isConnected) {
        
        vector<int> rank(isConnected.size(), 0);
        vector<int> parent(isConnected.size(), 0);

        for(int i = 0; i < parent.size(); i++) parent[i] = i;

        for(int i = 0; i < isConnected.size(); i++){
            for(int j = i + 1; j < isConnected[i].size(); j++){
                if(isConnected[i][j] == 1) Union(parent, rank, i, j);
            }
        }

        int numParent = 0;
        for(int i = 0; i < parent.size(); i++) {
            if(parent[i] == i) numParent++;
            
        }
        

        return numParent;
    }
};
