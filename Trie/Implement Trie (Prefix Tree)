//Almost similar to one of geeksforgeeks.

class Trie {
public:
    /** Initialize your data structure here. */
    struct TrieNode{
        char data;
        bool isEndOfWord;
        struct TrieNode* children[26];
    };
    struct TrieNode* root;
    
    struct TrieNode* getNode(void){
        struct TrieNode* pNode = new TrieNode;
        pNode -> isEndOfWord = false;
        
        for(int i = 0; i < 26; i++) pNode -> children[i] = NULL;
        
        return pNode;
    }
    
    Trie() {
        root = getNode();            
    }
    
    /** Inserts a word into the trie. */
    void insert(string word) {
       struct TrieNode* pCrawl = root;
        
        for(int i = 0; i < word.length(); i++){
            int index = word[i] - 'a';
            if(!pCrawl -> children[index]) pCrawl -> children[index] = getNode();
            pCrawl = pCrawl -> children[index];
        }
        pCrawl -> isEndOfWord = true;
    }
    
    

    
    /** Returns if the word is in the trie. */
    bool search(string word) {
        struct TrieNode* pCrawl = root;
        
        for(int i = 0; i < word.length(); i++){
            int index = word[i] - 'a';
            
            if(!pCrawl -> children[index]) return false;
            
            pCrawl = pCrawl -> children[index];
        }
        
        return (pCrawl != NULL && pCrawl -> isEndOfWord);
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    bool startsWith(string prefix) {
         struct TrieNode* pCrawl = root;
        
        for(int i = 0; i < prefix.length(); i++){
            int index = prefix[i] - 'a';
            
            if(!pCrawl -> children[index]) return false;
            
            pCrawl = pCrawl -> children[index];
        }
        
        if(pCrawl) return true;
        return false;
    }
};

/**
 * Your Trie object will be instantiated and called as such:
 * Trie* obj = new Trie();
 * obj->insert(word);
 * bool param_2 = obj->search(word);
 * bool param_3 = obj->startsWith(prefix);
 */
