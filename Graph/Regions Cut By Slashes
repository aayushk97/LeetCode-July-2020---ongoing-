//The main idea is to store the grid matrix as a scaled matrix where each '/' or '\\' is represented by 3x3 matrix. So that problem can be converted to number
// of islands.

class Solution {
public:
    int regionsBySlashes(vector<string>& grid) {
        vector<vector<int>> scaledGrid(3*grid.size(), vector<int>(3*grid[0].size(), 0));
        //cout<<grid.size()<<grid[0].size()<<endl;
        for(int i = 0; i < grid.size(); i++){
            for(int j = 0; j < grid[0].size(); j++){
                if(grid[i][j] == '/'){
                    scaledGrid[3*i][3*j+2] = 1;
                    scaledGrid[3*i+1][3*j+1] = 1;
                    scaledGrid[3*i+2][3*j] = 1;
                }else if(grid[i][j] == '\\'){
                    scaledGrid[3*i][3*j] = 1;
                    scaledGrid[3*i+1][3*j+1] = 1;
                    scaledGrid[3*i+2][3*j+2] = 1;
                }        
            }
        }
        
        /*for(int i = 0; i < scaledGrid.size(); i++){
            for(int j = 0; j < scaledGrid[0].size(); j++){
                cout<<scaledGrid[i][j]<<" ";
            }
            cout<<endl;
        }*/
        
        vector<vector<int>> visited(scaledGrid.size(), vector<int>(scaledGrid[0].size(), 0));
        int count = 0;
        for(int i = 0; i < scaledGrid.size(); i++){
            for(int j = 0; j < scaledGrid[0].size(); j++){
                if(scaledGrid[i][j] == 0 && visited[i][j] != 1){
                    dfs(scaledGrid, i, j, visited);
                    count++;
                }
            }
        }
        
        return count;
    }
    
    void dfs(vector<vector<int>>& scaledGrid, int i, int j, vector<vector<int>>& visited){
        if(i < 0 || j < 0 || i >= scaledGrid.size() || j >= scaledGrid[0].size() || scaledGrid[i][j] == 1) return;
        
        if(visited[i][j] == 1) return;
        
        visited[i][j] = 1;
        
        dfs(scaledGrid, i+1, j, visited);
        dfs(scaledGrid, i-1, j, visited);
        dfs(scaledGrid, i, j-1, visited);
        dfs(scaledGrid, i, j+1, visited);
    }
};
