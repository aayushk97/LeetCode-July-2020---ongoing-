//Dijikstras algorithm

class Solution {
public:
    int networkDelayTime(vector<vector<int>>& times, int n, int k) {
        vector<vector<pair<int, int>>> graph(n+1);
        
        for(int i = 0; i < times.size(); i++){
            graph[times[i][0]].push_back({times[i][1], times[i][2]});
        }
        
        vector<int> time(n+1, INT_MAX);
        vector<int> visited(n+1, 0);
        
        time[k] = 0;
        priority_queue<pair<int, int>> q;
        q.push({0,k});
        
        while(!q.empty()){
            pair temp = q.top();
            q.pop();
            
            if(visited[temp.second]) continue;
            
            visited[temp.second] = 1;
            
            for(int i = 0; i < graph[temp.second].size(); i++){
                int b = graph[temp.second][i].first;
                int w = graph[temp.second][i].second;
                
                if(time[temp.second] + w < time[b]){
                    time[b] = time[temp.second] + w;
                    q.push({-time[b], b});
                }
            }
            
            
        }
        int maxTime = 0;
        for(int i = 1; i < time.size(); i++){
            if(time[i] == INT_MAX) return -1;
            maxTime = max(maxTime, time[i]);
        }
        
        return maxTime;
    }
    
    
};
