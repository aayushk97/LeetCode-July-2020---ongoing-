//Here we maintain a set of all visited sqaures of board and if square has no way of reaching the bounday then it is considered to be surrounded.
//So any other 'O' visited in this exploration are also surrounded, if not there would be a path from this to border.
// Now we use dfs as usual to find if it has a path from that square to 'O' at border.

class Solution {
public:
    void solve(vector<vector<char>>& board) {
        for(int i = 0; i < board.size(); i++){
            for(int j = 0; j < board[0].size(); j++){
                if(board[i][j] == 'O'){
                    set<pair<int, int>> visited;
                    if(!checkIfNotSurrounded(board, i, j, visited)){
                        for(auto it = visited.begin(); it != visited.end(); it++){
                            board[it -> first][it ->second] = 'X';
                        }  
                    } 
                }
            }
        }
    }
    
    bool checkIfNotSurrounded(vector<vector<char>>& board, int i, int j, set<pair<int, int>>& visited){
        
        if(i < 0 || j < 0 || i >= board.size() || j >= board[0].size() || board[i][j] == 'X') return false;
        
        if(i == 0 || j == 0 || i == board.size()-1|| j == board[0].size()-1){
            if(board[i][j] == 'O') return true;
            else return false;
        }
        
        if(visited.find({i, j}) != visited.end()) return false;
         
        visited.insert({i, j});
        
        return checkIfNotSurrounded(board, i+1, j, visited) || checkIfNotSurrounded(board, i-1, j, visited) || checkIfNotSurrounded(board, i, j+1, visited) || checkIfNotSurrounded(board, i, j-1, visited);
        
    }
};
