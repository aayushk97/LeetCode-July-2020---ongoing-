//We find the distances to all nodes using floydd warshal. Then in matrix obtained we count how many are reachable within threshold. Then returrn the node which has least
// no of nodes reachable from it.

class Solution {
public:
    int findTheCity(int n, vector<vector<int>>& edges, int distanceThreshold) {
        vector<vector<int>> graph(n, vector<int>(n, INT_MAX));
        
        for(int i = 0; i < edges.size(); i++){
            graph[edges[i][0]][edges[i][1]] = edges[i][2];
            graph[edges[i][1]][edges[i][0]] = edges[i][2];
        }
        
        for(int i = 0; i < n; i++) graph[i][i] = 0;
        
        for(int k = 0; k < n; k++){
            for(int i = 0; i < n; i++){
                for(int j = 0; j < n; j++){
                    if(graph[i][k] != INT_MAX && graph[k][j] != INT_MAX && graph[i][j] > graph[i][k] + graph[k][j])
                        graph[i][j] = graph[i][k] + graph[k][j];
                }
            }
        }
        
       /* for(int i = 0; i < n; i++){
            for(int j = 0; j < n; j++){
                cout<<graph[i][j]<<" ";
                
            }
            cout<<endl;
        }*/
        
        int minNodes = INT_MAX, node = -1;
        for(int i = 0; i < n; i++){
            int count = 0;
            for(int j = 0; j < n; j++){
                if(i!=j && graph[i][j] <= distanceThreshold) count++;
                
            }
            //cout<<count<<" "<<minNodes<<endl;
            if(count <= minNodes){
                //cout<<"I";
                minNodes = count;
                node = i;
            }
        }
        
        return node;
    }
};
