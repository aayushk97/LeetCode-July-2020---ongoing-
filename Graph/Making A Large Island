//We traverse each region and mark it with some number (region number) and store the are of that region. Now, we then look for 0 in the grid and check its neighbour
//regions and add the area from stored matrix and then return whatwever was the largest area.

//Once we have marked all the regions what should we do. The problem we have to solve now is merge multiple islands if there is just one 0 separating these.
So we have to iterate over all the 0s and check the distinct neighbors. Now all these neighbors will become one island if we flip this 0 to 1. So we add the area for all the neighbors.
If this area is greater than the max area, we update the max.


class Solution {
public:
    int largestIsland(vector<vector<int>>& grid) {
        
        unordered_map<int, int> regions;
        int region = 2;
        int maxArea = INT_MIN;
        
        for(int i = 0; i < grid.size(); i++){
            for(int j = 0; j < grid[0].size(); j++){
                if(grid[i][j] == 1){
                    int area = dfs(grid, i, j, region);
                    regions[region] = area;
                    maxArea = max(maxArea, area);
                    region++;
                }
            }
        }
        
        
        for(int i = 0; i < grid.size(); i++){
            for(int j = 0; j < grid[0].size(); j++){
                if(grid[i][j] == 0){
                    int area = 1;
                    set<int> neighbours;
                    if(i-1 >= 0) neighbours.insert(grid[i-1][j]);
                    if(i+1 < grid.size()) neighbours.insert(grid[i+1][j]);
                    if(j-1 >= 0) neighbours.insert(grid[i][j-1]);
                    if(j+1 < grid[0].size()) neighbours.insert(grid[i][j+1]);
                    
                    for(int neighbour: neighbours){
                        area+= regions[neighbour];
                       
                    }
                    //cout<<area<<endl;
                    maxArea = max(area, maxArea);
                }
            }
        }
        
        return maxArea;
    }
    
    int dfs(vector<vector<int>>& grid, int i, int j, int region){
        
        if(i < 0 || j < 0 || i >= grid.size() || j >= grid[0].size()|| grid[i][j] != 1) return 0;
        
        grid[i][j] = region;
        
        int area = 1;
        area += dfs(grid, i-1, j, region);
        area += dfs(grid, i+1, j, region);
        area += dfs(grid, i, j-1, region);
        area += dfs(grid, i, j+1, region);
        
        return area;
    }
};
