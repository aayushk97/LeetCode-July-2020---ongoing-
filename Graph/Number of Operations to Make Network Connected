//If the no of connections is less than no of nodes -1 then only we can create connected graph. 
//If there are req no of wires then we find the no of components. Since, we need to connect each of k component by k-1 wires(which can be obtained by any already connected componenet
// doesn't matter which one as already we have req no of wires present.) So we return k-1 as result.

class Solution {
public:
    int makeConnected(int n, vector<vector<int>>& connections) {
        if(connections.size() < n-1) return -1;
        
        vector<vector<int>> graph(n);
        for(int i = 0; i < connections.size(); i++){
            graph[connections[i][0]].push_back(connections[i][1]);
            graph[connections[i][1]].push_back(connections[i][0]);
        }
        
        vector<int> visited(n);
        int connect = 0;
        for(int i = 0; i < n; i++){
            if(visited[i] != 1){
                dfs(graph, i, visited);
                connect++;
            }
        }
        
        return connect-1;
        
    }
    
    void dfs(vector<vector<int>>& graph, int src, vector<int>& visited){
        if(visited[src]) return;
        visited[src] =1;
        
        for(int i = 0; i < graph[src].size(); i++){
            dfs(graph, graph[src][i], visited);
        }
    }
};
