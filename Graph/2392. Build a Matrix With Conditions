//Steps:
//1. Perform topological sort to get the ordering of elements in row and columns
//2. Then we place the element as well as its position in ordered vector in map
//3. For each element get the row and column to where it can be placed and then put that element there using position stored in map.

class Solution {
public:
    vector<vector<int>> buildMatrix(int k, vector<vector<int>>& rowConditions, vector<vector<int>>& colConditions) {
        
        vector<vector<int>> res(k, vector<int>(k, 0));

        vector<vector<int>> graphRow(k + 1);

        for(int i = 0; i < rowConditions.size(); i++){
            graphRow[rowConditions[i][0]].push_back(rowConditions[i][1]);
        }

        vector<vector<int>> graphCol(k + 1);

        for(int i = 0; i < colConditions.size(); i++){
            graphCol[colConditions[i][0]].push_back(colConditions[i][1]);
        }

        vector<int> rowOrder = topoSort(graphRow, k);
        vector<int> colOrder = topoSort(graphCol, k);

        for(int i = 0; i < rowOrder.size(); i++) cout<<rowOrder[i]<<" ";
        cout<<endl;
        for(int i = 0; i < colOrder.size(); i++) cout<<colOrder[i]<<" ";

        if(rowOrder.empty() || colOrder.empty()) return {};

        vector<vector<int>> result(k, vector<int>(k, 0));
        unordered_map<int, int> rowMap, colMap;

        for(int i = 0; i < k; i++){
            rowMap[rowOrder[i]] = i;
            colMap[colOrder[i]] = i;
        }

        for(int i = 1; i <= k; i++){
            res[rowMap[i]][colMap[i]] = i;
        }

        

        return res;

    }

    vector<int> topoSort(vector<vector<int>>& graph, int k){
        vector<int> inDegree(k + 1, 0), order;

        queue<int> q;

        for(int i = 1; i <= k; i++) {
            for(int j = 0; j < graph[i].size(); j++) inDegree[graph[i][j]]++;
        }

        for(int i = 1; i <= k; i++) if(inDegree[i] == 0) q.push(i);

        while(q.size()){
            int node = q.front(); q.pop();
            order.push_back(node);
            for (int adj : graph[node]) {
                if (--inDegree[adj] == 0) q.push(adj);
            }
        }
        return order.size() == k ? order : vector<int>();
        
    }
};
