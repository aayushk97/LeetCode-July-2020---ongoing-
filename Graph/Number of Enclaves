//We first find if there are any 1's in boundary then we fill all the nodes connected to it to 0 using dfs.
//Then we cound the number of 1s in the grid.

class Solution {
public:
    int numEnclaves(vector<vector<int>>& grid) {
        
        
        int count = 0;
        vector<pair<int, int>> flood;
        
        for(int i = 0; i < grid.size(); i++){
            if(grid[i][0] == 1) flood.push_back({i, 0});
            if(grid[i][grid[0].size()-1] == 1) flood.push_back({i, grid[0].size()-1});
        }
        //cout<<flood.size()<<endl;
        vector<vector<int>> visited(grid.size(), vector<int>(grid[0].size()));
        
        for(int j = 0; j < grid[0].size(); j++){
            if(grid[0][j] == 1) flood.push_back({0, j});
            if(grid[grid.size()-1][j] == 1) flood.push_back({grid.size()-1, j});
        }
        
        for(int i = 0; i < flood.size(); i++) dfs(grid, visited, flood[i].first, flood[i].second);
        
        for(int i = 0; i < grid.size(); i++){
            for(int j = 0; j < grid[0].size(); j++){
                if(grid[i][j] == 1 ) {
                    count++; 
                }
            }
        }
        
        return count;
        
    }
    
    void dfs(vector<vector<int>>& grid, vector<vector<int>>& visited, int i, int j){
        //cout<<i<<j<<endl;
        //if(i == 0 || i == grid.size()-1 || j == 0 || j == grid[0].size()-1) return ;
        
        if(grid[i][j] == 0) return ;
        
        visited[i][j] = 1;
        grid[i][j] = 0;
        int left = 0, right = 0, up = 0, down = 0;
        
        if(i-1 >= 0 && !visited[i-1][j] && grid[i-1][j] != 0) dfs(grid, visited, i-1, j);

        if(i+1 < grid.size() && !visited[i+1][j] && grid[i+1][j] != 0) dfs(grid, visited, i+1, j);
            
        
        if(j+1 < grid[0].size() && !visited[i][j+1] && grid[i][j+1] != 0) dfs(grid, visited, i, j+1);
        
        if(j-1 >= 0 && !visited[i][j-1] && grid[i][j-1] != 0)dfs(grid, visited, i, j-1);
           
        
    }
};
