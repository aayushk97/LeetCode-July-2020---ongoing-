//Assign each node to a set and check if it is encountered again what set will it belong to

class Solution {
public:
    bool isBipartite(vector<vector<int>>& graph) {
        
        vector<int> visited(graph.size(), 0);
        vector<int> partition(graph.size(), -1);
        
        for(int i = 0; i < graph.size(); i++){
            if(!visited[i]){
                if(!canBePartitioned(graph, i, visited, partition)) return false;    
            }
            
        }
        
        return true;
        
    }
    
    bool canBePartitioned(vector<vector<int>>& graph, int k, vector<int>& visited, vector<int>& partition){
        
        queue<int> q;
        q.push(k);
        q.push(-1);
        int i = 0;
        
        while(q.size() > 1){
            int curr = q.front();
            q.pop();
            
            if(curr == -1){
                i = 1 - i;
                q.push(-1);
            }
            if(curr == -1) continue;
            //cout<<curr<<endl;
            if(visited[curr] && partition[curr] != i) return false;
            if(visited[curr]) continue;
            
            partition[curr] = i;
            visited[curr] = 1;
            
            for(int t = 0; t < graph[curr].size(); t++){
                q.push(graph[curr][t]);
               
            }
            
        }
        
        return true;
        
    }
};
