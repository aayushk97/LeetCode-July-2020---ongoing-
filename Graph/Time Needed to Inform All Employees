//Traverse down the tree to find the max time taken to spread the info and then return it.

class Solution {
public:
    int numOfMinutes(int n, int headID, vector<int>& manager, vector<int>& informTime) {
        
        vector<vector<int>> graph(n);
        
        for(int i = 0; i < n; i++){
            if(manager[i] != -1) graph[manager[i]].push_back(i);
        }
        
        return findNumMinutes(headID, graph, informTime);
        
    }
    
    int findNumMinutes(int headID, vector<vector<int>>& graph, vector<int>& minutes){
        
        int val = 0;
        
        for(int i = 0; i < graph[headID].size(); i++){
            val = max(val, minutes[headID] + findNumMinutes(graph[headID][i], graph, minutes));    
        }
        
        return val;
        
    }
};
