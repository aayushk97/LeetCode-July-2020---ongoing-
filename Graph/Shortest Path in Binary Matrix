//Just BFS including all neighbours and diagonal neighbours. Since we break out when reaching the final cell we need to add 1 to result.
//Check the cases properly.

class Solution {
public:
    int shortestPathBinaryMatrix(vector<vector<int>>& grid) {
        
        if(grid[grid.size()-1][grid[0].size()-1] != 0 || grid[0][0] != 0) return -1;
        
        queue<pair<int, int>> q;
        q.push({0,0});
        q.push({-1, -1});
        
        vector<vector<int>> visited(grid.size(), vector<int>(grid[0].size(), 0));
        int x = 0, y =0;
        int level = 0;
        while(q.size() > 1){
            pair<int, int> curr = q.front();
            q.pop();
            x = curr.first;
            y = curr.second;
            //cout<<x<<y<<endl;
            if(x == -1 && y == -1){
               level++;
               q.push({-1, -1}); 
            }
            if(x == -1 && y == -1) continue;
            
            if(x == grid.size()-1 && y == grid[0].size()-1) break;
            
            if(visited[x][y]) continue;
            visited[x][y] = 1;
            
            if(x - 1 >= 0 && grid[x-1][y] == 0) q.push({x-1, y});
            if(x + 1 < grid.size() && grid[x+1][y] == 0) q.push({x+1, y});
            if(y - 1 >= 0 && grid[x][y-1] == 0) q.push({x, y-1});
            if(y + 1 < grid[0].size() && grid[x][y+1] == 0) q.push({x, y+1});
            if(x + 1 < grid.size() && y + 1 < grid[0].size() && grid[x+1][y+1] == 0) q.push({x+1, y+1});
            if(x - 1 >= 0 && y - 1 >= 0 && grid[x-1][y-1] == 0) q.push({x-1, y-1});
            if(x-1 >= 0 && y + 1 < grid[0].size() && grid[x-1][y+1] == 0) q.push({x-1, y+1});
            if(x+1 < grid.size() && y-1>= 0 && grid[x+1][y-1] == 0) q.push({x+1, y-1});
            
        }
        //cout<<x<<y<<endl;
        if(x == grid.size()-1 && y == grid[0].size()-1) return level+1;
        else return -1;
    }
};
