//used quick sort.
//O(n) : we can maintain 2 pointers and whenever we encounter a 0 we put it to left and when 2 then put it to right.
//note the order of while loop inside for loop as changing order gives wrong answer.
https://leetcode.com/problems/sort-colors/discuss/26472/Share-my-at-most-two-pass-constant-space-10-line-solution


class Solution {
public:
    void sortColors(vector<int>& nums) {
        
        quickSort(nums, 0, nums.size()-1);
        
    }
    
    void quickSort(vector<int>& nums, int i, int j){
        
        if(i > j ) return;
        
        
        int pivot = partition(nums, i, j);
 
        quickSort(nums, i, pivot-1);
        quickSort(nums, pivot+1, j);
        
    }
    
    int partition(vector<int>& nums, int i, int j){
        
        int pivot = nums[j];
        
        int l = i;
        for(int k = i; k <= j-1; k++){
            
            if(nums[k] <= pivot) {
                swap(nums[k], nums[l]);
                l++;
            }
            
        }
        
        swap(nums[j], nums[l]);
        return l;
    }
};
