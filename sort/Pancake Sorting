class Solution {
public:
    bool IsSorted(vector<int>& A, int limit){
        for(int i = 1; i <= limit; i++){
            if(A[i] < A[i - 1]) return false;
        }
        return true;
    }
    int findLimit(vector<int>& A){
        for(int i = A.size() -1; i >= 0 ; i--){
            if(A[i] != i + 1) return i;
        }
        return -1;
    }
    
    int findMax(vector<int>& A, int limit){
        int max = A[0];
        int index = 0;
        for(int i = 1; i <= limit ; i++){
            if(A[i] > max){
                max = A[i];
                index = i;
            }
        }
        return index;
    }
    void reverseArray(vector<int>& A, int limit){
        for(int i = 0 ; i <= limit/2; i++){
            int temp = A[i];
            A[i] = A[limit - i];
            A[limit - i] = temp;
        }
    }
    vector<int> pancakeSort(vector<int>& A) {
        vector<int> flips;
        int limit = A.size() - 1;
        int max = -1;
        while(!IsSorted(A, limit)){
            limit = findLimit(A);
            
            if(limit == -1) break;
            
            max = findMax(A, limit);
            reverseArray(A, max);
            flips.push_back(max + 1);
            reverseArray(A, limit);
            flips.push_back(limit + 1);
            
        }
        
        return flips;
    }
};
