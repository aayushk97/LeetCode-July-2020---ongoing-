//We sort according to start location and destrination so that all the trips are covered in one trip. 
//Then we create an array of 1000 as max stop can go to 1000. Then we fill it with max capacity at a dist by increemneting in the journey and decrementing at the 
//stop. Then if at some point if no of passengers that need to be filled is more than capatcity then we reutrn false;

class Solution {
public:
    bool carPooling(vector<vector<int>>& trips, int capacity) {
        
        sort(trips.begin(), trips.end(), comp);
        
        vector<int> passengerStop(1000, 0);
        
        int last = INT_MAX;
        
        for(int i = 0; i < trips.size(); i++){
            
           
            for(int j = trips[i][1]; j <= trips[i][2]; j++){
                passengerStop[j] += trips[i][0];
                //cout<<"j: "<<j<<" "<<passengerStop[j]<<" ";
                if(passengerStop[j] > capacity) return false; 
            }
            
            passengerStop[trips[i][2]] -= trips[i][0]; 
            
        }
        
        
        return true;
    }
    
    
    
    static bool comp(vector<int>& a, vector<int>& b){
        
        if(a[1] < b[1]) return true;
        else if(a[1] == b[1] && a[2] < b[2]) return true;
        
        return false;
        
    }
};

//We can even do it in 2 scans O(n) time by first adding and subtracting at each start and end point and in next iteration we add net amount of people
//in array and if it is greater than 0 then we return true else if capacity we return false as there were more people than capacity.

bool carPooling(vector<vector<int>>& trips, int capacity) {
  int stops[1001] = {};
  for (auto t : trips) stops[t[1]] += t[0], stops[t[2]] -= t[0];
  for (auto i = 0; capacity >= 0 && i < 1001; ++i) capacity -= stops[i];
  return capacity >= 0;
}
