//sort the array and then for every element check all the prev envelopes and see if the size is such that it can fit, if yes then increase no of envelopes by 1;
//We can either search in the cache to find the max size or keep checking the max after each element is maxEnv is filled.

class Solution {
public:
    int maxEnvelopes(vector<vector<int>>& envelopes) {
        
        sort(envelopes.begin(), envelopes.end());
        vector<int> maxEnv(envelopes.size(), 1);
        int size = 1;
        for(int i = 0; i < envelopes.size(); i++){
            for(int j = i-1; j >= 0; j--){
                if(envelopes[j][0] < envelopes[i][0] && envelopes[j][1] < envelopes[i][1]){
                    maxEnv[i] = max(maxEnv[i], maxEnv[j]+1);
                    
                }
                size = max(size, maxEnv[i]);
            }
        }
        
        return size;
        
    }
};
