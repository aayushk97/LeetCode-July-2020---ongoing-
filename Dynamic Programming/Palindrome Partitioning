class Solution {
public:
    vector<vector<string>> partition(string s) {
        vector<vector<string>> palindromes;
        vector<string> partition;
        
        vector<vector<int>> isPalindrome(s.length(), vector<int>(s.length(),-1));
        
        
        getAllPalindromes(s, palindromes, partition, isPalindrome, 0);
        
        return palindromes;
    }
    
    void getAllPalindromes(string s, vector<vector<string>>& palindromes, vector<string>& partition, vector<vector<int>>& isPalindrome, int i){
        //cout<<"Here"<<i<<endl;
        
        if(i > s.length()) return ;
        
        
        if(i == s.length()){
            //cout<<"Pushed"<<endl;
            palindromes.push_back(partition);
            //cout<<"Partition size: "<<palindromes.size()<<endl;
            //partition.clear();
        }
        
        for(int k = i; k < s.length(); k++){
            string sub = "";
            sub = s.substr(i, k - i + 1);
            
            if(isPalindrome[i][k] != -1) {
                partition.push_back(sub);
                getAllPalindromes(s, palindromes, partition, isPalindrome, k+1);
                partition.pop_back();
            }else{
                
                if(checkIfPalindrome(sub)){
                    partition.push_back(sub);
                    isPalindrome[i][k] = 1;
                    getAllPalindromes(s, palindromes, partition, isPalindrome, k+1);
                    partition.pop_back();
                }
                
                
            }
            
        }
        
    }
    
    bool checkIfPalindrome(string a){
        for(int i = 0; i < a.length()/2; i++){
            if(a[i] != a[a.length()-i-1]) return false;
        }
        
        return true;
    }
};
