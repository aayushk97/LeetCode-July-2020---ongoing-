class Solution {
public:
    int knightDialer(int n) {
        vector<vector<vector<long>>> dp(4, vector<vector<long>>(3, vector<long>(n+1, -1)));
        
        long sum = 0;
        
        for(int i = 0; i < 4; i++){
            for(int j = 0; j < 3; j++){
               // cout<<"sum: " <<sum<<endl;
                sum += diffPhoneNums(4, 3, n, i, j, n, dp)%1000000007;
            }
        }
        return sum%1000000007;
    }
    
    long diffPhoneNums(int m, int n, int maxMoves, int row, int col, int moves, vector<vector<vector<long>>>& dp){
        //cout<<"1. "<<row<<" "<<col<<" "<<endl;
        if(moves < 0 || row >= m || col >= n || row < 0 || col < 0 || (row == 3 && col== 0) || (row == 3 && col == 2)) return 0;
        
        if(moves == 1 && row >= 0 && col >= 0 && row < m && col < n) return 1;
        else if(moves <= 1) return 0;
        
        //cout<<"2. "<<row<<" "<<col<<" "<<endl;
        
        
        if(dp[row][col][moves] != -1) return dp[row][col][moves];
        
        long left1 = diffPhoneNums(m, n, maxMoves, row-1, col-2, moves-1, dp)%1000000007;
        long left2 = diffPhoneNums(m, n, maxMoves, row-2, col-1, moves-1, dp)%1000000007;
        long left3 = diffPhoneNums(m, n, maxMoves, row+1, col-2, moves-1, dp)%1000000007;
        long left4 = diffPhoneNums(m, n, maxMoves, row+2, col-1, moves-1, dp)%1000000007;
        
        long right1 = diffPhoneNums(m, n, maxMoves, row-2, col+1, moves-1, dp)%1000000007;
        long right2 = diffPhoneNums(m, n, maxMoves, row-1, col+2, moves-1, dp)%1000000007;
        long right3 = diffPhoneNums(m, n, maxMoves, row+2, col+1, moves-1, dp)%1000000007;
        long right4 = diffPhoneNums(m, n, maxMoves, row+1, col+2, moves-1, dp)%1000000007;
        
        return dp[row][col][moves] = (left1 + left2 + left3 + left4 + right1 + right2 + right3 + right4)%1000000007;
        
    }
};
