//Since the robot can only move right and down, when it arrives at a point, it either arrives from left or above. 
//If we use dp[i][j] for the number of unique paths to arrive at the point (i, j), then the state equation is dp[i][j] = dp[i][j - 1] + dp[i - 1][j].
//Moreover, we have the base cases dp[0][j] = dp[i][0] = 1 for all valid i and j.

//The above solution runs in O(m * n) time and costs O(m * n) space. However, you may have noticed that each time when we update dp[i][j],
//we only need dp[i - 1][j] (at the previous row) and dp[i][j - 1] (at the current row). So we can reduce the memory usage to just two rows (O(n)).

//Further inspecting the above code, pre[j] is just the cur[j] before the update. So we can further reduce the memory usage to one row.

class Solution {
public:
    int uniquePaths(int m, int n) {
        
        vector<vector<int>> distPaths(m, vector<int>(n, -1));
        distPaths[0][0] = 1;
        if(m > 1) distPaths[1][0] = 1;
        if(n > 1) distPaths[0][1] = 1;
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                int top = 0, left = 0;
                if(distPaths[i][j] == -1){
                    if(i > 0) top = distPaths[i-1][j];
                    if(j > 0) left = distPaths[i][j-1];
                    
                    distPaths[i][j] = top + left;
                }
            }
        }
        
        return distPaths[m-1][n-1];
        
    }
    
 //Shorter method: We fill entire 1st row and colum with 1 or entire matrix as 1 then take the num ways to reach i-1, j + num ways to reach i, j-1.
 class Solution {
public:
    int uniquePaths(int m, int n) {
     
        vector<vector<int>> dp(m, vector<int>(n, 1));
        
        for(int i = 1; i < m; i++){
            for(int j = 1; j < n; j++){
                dp[i][j] = dp[i-1][j] + dp[i][j-1];
            }
        }
        
        return dp[m-1][n-1];
    }
};
 
    
    
    
};
