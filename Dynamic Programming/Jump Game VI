//we find the max element in the prev k elements using multiSet which acts as multi queue and then add it to the new value. We subsequently remove the last
// element from window of k element when new element is added.

class Solution {
public:
    int maxResult(vector<int>& nums, int k) {
        
        vector<int> score(nums.size(), INT_MIN);
        
        multiset<int> s({score[0] = nums[0]});
        
        for(int i = 1; i < nums.size(); i++){
           
            if(i > k) s.erase(s.find(score[i-k-1]));  
            
            s.insert(score[i] = *rbegin(s) + nums[i]);
            
        }
        
       // for(int i = 0; i < score.size(); i++) cout<<score[i]<<endl;
        
        return score[score.size()-1];
        
    }
};
