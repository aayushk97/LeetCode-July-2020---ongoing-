//Here we see that string of length 1 is always a palindrome. Then we find if there are any plaindromes of length 2. i.e, 2 consecutive same letter.
//Then for each length we check all possible combinations. ex for length 3 we check (0,2),(1,3),(2,4) etc. So in this if the substring that is at i+1, j-1 is palindrome
and s[i] == s[j] then (i,j) is also a palindrome.

class Solution {
public:
    string longestPalindrome(string s) {
        vector<vector<bool>> dp(s.length(), vector<bool>(s.length()));
        
        int maxLength = 1;
        int startIndex = 0;
        
        for(int i = 0; i < s.length(); i++) dp[i][i] = true;
        
        for(int i = 0; i < s.length()-1; i++){
            if(s[i] == s[i+1]){
                dp[i][i+1] = true;
                maxLength = 2;
                startIndex = i;
            } 
        }
        
        for(int l = 3; l <= s.length(); l++){
            for(int i = 0, j = i + l -1; i < s.length() - l + 1; i++, j++){
                if(dp[i+1][j-1] && s[i] == s[j]){
                    dp[i][j] = true;
                    //cout<<"Here";
                    if(maxLength < l){
                        maxLength = l;
                        startIndex = i;
                    }
                }
            }
        }
        
        string palindrome = "";
        
        for(int i = startIndex; i < startIndex + maxLength; i++){
            palindrome += s[i];
        }
        
        return palindrome;
        
    }
};
