//Here, initial condition is we buy at day 0 at price[0] and buy at day 1 with price of min of either day 0 and day 1 and sell at max of 0 or prices[1].
//The rest continues as other buy and sell problems but instead of looking at previous day when buying we look at prev to prev day as there is a cooldown of 1 day.
//The selling can be done at any day.

class Solution {
public:
    int maxProfit(vector<int>& prices) {
        
        vector<int> buy(prices.size(), 0);
        vector<int> sell(prices.size(), 0);
        
        buy[0] = -prices[0];
        
        if(prices.size() == 1) return sell[0];
        
        buy[1] = - min(prices[0], prices[1]);
        
        sell[1] = max(0, buy[0] + prices[1]);
        
        for(int i = 2; i < prices.size(); i++){
            
            buy[i] = max(buy[i-1], sell[i-2]-prices[i]);
            sell[i] = max(sell[i-1], buy[i-1]+prices[i]);
            
        }
        
        return sell[prices.size()-1];
    }
};
