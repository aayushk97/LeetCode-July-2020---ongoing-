//We at first day buy stock with fee so buy[0] = -prices[0] - fee, then at subsequent days we can either not buy or buy from earlier sold stock and since initially,
//we have no not sold any stocks so buys one will be stored in subsequent days.
//In sell at a particular day we can either not sell or sell at a prices and profit is obtained by adding the brought + sold.
//We return at end sold price at end day because we can't buy at end day.
//https://www.youtube.com/watch?v=qTUUTE6Cz7c

class Solution {
public:
    int maxProfit(vector<int>& prices, int fee) {
        
        vector<int> buy(prices.size(), 0);
        vector<int> sell(prices.size(), 0);
        
        buy[0] = -prices[0] - fee;
        
        
        for(int i = 1; i < prices.size(); i++){
            buy[i] = max(buy[i-1], sell[i-1]-prices[i]-fee);
            sell[i] = max(sell[i-1], prices[i] + buy[i-1]);
        }
        
        
        
        return sell[prices.size()-1];
        
    }
};
