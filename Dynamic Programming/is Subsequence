// Just use LCS to find the ma length substring and then check if tis size is equal to given string.

class Solution {
public:
    int l[101][10001]={0};
    bool isSubsequence(string s, string t) {
        
       int k = isSubs(s,t,s.length()-1,t.length()-1);
        cout<<k;
        if(k==s.size()) return true;
        else return false;
    }
    
    int isSubs(string s, string t, int i, int j){
        int size = 0;
        if(i < 0 || j < 0) {
            l[0][0] = 0;
            return l[0][0];
        }
        
        //cout<<i<<j<<"\n";
        if(s[i]==t[j]) l[i+1][j+1] = 1 + isSubs(s,t,i-1, j-1);
        else{
            if(l[i-1+1][j+1] == 0) l[i-1+1][j+1] = isSubs(s, t, i-1, j);
            if(l[i+1][j-1+1] == 0) l[i+1][j-1+1] = isSubs(s, t, i, j-1);
            l[i+1][j+1] = max(l[i-1+1][j+1], l[i+1][j-1+1]);
        }
        
        return l[i+1][j+1];
    }
};
