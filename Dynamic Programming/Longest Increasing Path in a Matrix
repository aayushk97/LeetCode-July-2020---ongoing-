//We at each location find the max length of increasing number and store it in an matrix. Now when we are at nearby element and we have calculated the value of 
//lenght of longest decreasing sequence then we can add one at this node, if the neighbour node is of larger value.

class Solution {
public:
    int longestIncreasingPath(vector<vector<int>>& matrix) {
     
        vector<vector<int>> decrPath(matrix.size(), vector<int>(matrix[0].size(), -1));
        
        int maxLength = 0;
        
        for(int i = 0; i < matrix.size(); i++){
            for(int j = 0; j < matrix[0].size(); j++){
                if(decrPath[i][j] == -1){
                    //cout<<"here"<<endl; 
                    dfs(matrix, i, j, decrPath);
                    
                }
                maxLength = max(maxLength, decrPath[i][j]);
            }
        }
        
        return maxLength;
        
    }
    
    int dfs(vector<vector<int>>& matrix, int i, int j, vector<vector<int>>& decrPath){
        
        if(i < 0 || j < 0 || i >= matrix.size() || j >= matrix[0].size()) return 0;
        
        //cout<<i<<" "<<j<<endl;
        
        int left = 0, right = 0, up = 0, down = 0;
        
        if(decrPath[i][j] != -1) return decrPath[i][j];
        
        if(i+1 < matrix.size() && matrix[i+1][j] > matrix[i][j]) down = dfs(matrix, i+1, j, decrPath);
        if(j+1 < matrix[0].size() && matrix[i][j+1] > matrix[i][j]) right = dfs(matrix, i, j+1, decrPath);
        if(i-1 >= 0 && matrix[i-1][j] > matrix[i][j]) up = dfs(matrix, i-1, j, decrPath);
        if(j-1 >= 0 && matrix[i][j-1] > matrix[i][j]) left = dfs(matrix, i, j-1, decrPath);
        
        return decrPath[i][j] = 1+max(up, max(down, max(left, right)));
    }
    
    
};
