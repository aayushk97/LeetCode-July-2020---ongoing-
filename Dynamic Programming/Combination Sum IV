//since the numbers can be repeated again many times and out of order so it is better to include a number in a step and then call the same thing again
//Here we store the number of ways to create a sum in an array as we can have a for target 4 we can go from 1 + 1 + 1 + 1, 1 + 1 + 2 then some
//other branch 2 + numwaystocreate(2) which is already stored in array as sumPoss[2] = 2;
class Solution {
public:
    int combinationSum4(vector<int>& nums, int target) {
        vector<int> sumPos(target+1, -1);
        
        return findCombs(nums, target, 0, sumPos);
    }
    
    int findCombs(vector<int>& nums, int target, int sum, vector<int>& sumPoss){
        
        if(sum == target) return 1;
        
        if(sum > target) return 0;
        
        if(sumPoss[sum] != -1) return sumPoss[sum];
        
        int paths = 0;
        
        for(int i = 0; i < nums.size(); i++){
            if(sum + nums[i] <= target) paths+=findCombs(nums, target, sum+nums[i], sumPoss); 
        }
        
        return sumPoss[sum] = paths;
        
    }
};
