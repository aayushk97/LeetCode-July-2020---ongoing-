//At each node we can either ignore this and move on to the next level or add this level and go to level next to next to it and recursively follow this.
//Since a node is visited, when we reach it by ignoring or by adding so there may be overlapping subproblems.

class Solution {
public:
    int rob(TreeNode* root) {
        
        unordered_map<TreeNode*, int> dp;
        
        return maxRob(root, dp);
        
    }
    
    int maxRob(TreeNode* root, unordered_map<TreeNode*, int>& dp){
        if(!root) return 0;
        
        if(dp.find(root) != dp.end()) return dp[root];
        
        int excludeCurrent = maxRob(root -> left, dp) + maxRob(root -> right, dp);
        
        int includeCurrent = root -> val;
        
        if(root -> left) includeCurrent+= maxRob(root-> left -> left, dp) + maxRob(root -> left -> right, dp);
        
        if(root -> right) includeCurrent += maxRob(root -> right -> left, dp) + maxRob(root ->right -> right, dp);
         
        int maxRobbed = max(excludeCurrent, includeCurrent);
        return dp[root] = maxRobbed;
        
        
        
        
    }
};
