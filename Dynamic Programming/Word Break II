//We cand o this using even DFS by first finding a substring that matches with word in dict and then add space to word, continuously do this untill we reach the end of 
//string then we can add this string to result.
//Now, DP comes when we have reached a index from 2 different prefixes then the rest part is already computed and stored in dp.
//Here instead of storing the string in vector when idx == length we from the end put the last matching string then go back and iterate through array and add this
//matched string to all the strings in array. This result is then stored in map.

class Solution {
public:
    vector<string> wordBreak(string s, vector<string>& wordDict) {
        
        
        unordered_set<string> words;
        map<int, vector<string>> dp;
        
        for(int i = 0; i < wordDict.size(); i++) words.insert(wordDict[i]);
        
        return findWords(s, 0, "", words, dp);
        
    }
    
    vector<string> findWords(string& s, int idx, string currWord, unordered_set<string>& words, map<int, vector<string>>& dp){
        
        
        if(dp.find(idx) != dp.end()) return dp[idx];
        
        vector<string> result;
        
        for(int i = idx; i < s.length(); i++){
            if(words.find(s.substr(idx, i-idx+1)) != words.end()){
                if(i+1 == s.length()){
                    result.push_back(s.substr(idx, i-idx+1));
                }else{
                   vector<string> subList = findWords(s, i+1, currWord+" "+s.substr(idx, i-idx+1), words, dp);    
                    for(auto sub: subList) result.push_back(s.substr(idx, i-idx+1)+" "+sub);
                }
                
                
            } 
        }
        return dp[idx] = result;
    }
};
