//If the char matches, then the number of subsequences that matches in s[0...j] and t[0..i] is number of subsequences that match without this char i.e, dp[i-1][j-1] 
//and the number of subsequences of s that has this char previously dp[i][j-1]. We can add the curr char to all the prev subsequences of 1 less char to get 
//longer subsequences + we add the prev subsequences where this char was already added i.e, if a string is s = abgab t = ab, then if curr char is b at the end we have 2
//seen which we can add to b to get 2 ab's and prev we had seen a b we also add that subsequence to get total no of subsequence till now.
//If the chars are not same, the numeber of subsequences remain same.

class Solution {
public:
    int numDistinct(string s, string t) {
        
       
        
        vector<vector<double long>> dp(t.length()+1, vector<double long>(s.length()+1, 0));
        
        for(int j = 0; j <= s.length(); j++){
            dp[0][j] = 1;
        }
        
        for(int i = 1; i <= t.length(); i++){
            for(int j = 1; j <= s.length(); j++){
                
                if(s[j-1] == t[i-1]){
                    dp[i][j] = dp[i][j-1] + dp[i-1][j-1];
                }else{
                    dp[i][j] = dp[i][j-1];
                }
            }
        }
        
        
        
        return dp[t.length()][s.length()];
    }
};
