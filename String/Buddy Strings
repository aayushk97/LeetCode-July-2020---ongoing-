//If there are repeated characters and string is same so we can swap those repeated character once and string will be same so we return true in that case.
//If string is same but no repeated chars we return false. 
//Now If there are different chars, then we need to find 2 such pos where the goal is not same, now in these 2 position we can swap the elements and then chekc if the 
//string is same. If not, then we return false.
//100% time.

class Solution {
public:
    bool buddyStrings(string s, string goal) {
        
        vector<int> count(26, 0);
        
        if(s == goal){
            for(int i = 0; i < s.length(); i++) {
                count[s[i] - 'a'] += 1;
                if(count[s[i]-'a'] > 1) return true;
            }
            return false;
        }
        
       
        
        int left = -1, right = -1;
        for(int i = 0; i < s.length(); i++){
            if(s[i] != goal[i]){
                if(left == -1)left = i;
                else if(right == -1) right = i;
                else break;
                
            }
        }
        
        //cout<<left<<" "<<right<<endl;
        if(left == -1 || right == -1) return false;
        
        
      
        swap(s[left], s[right]);
        
        if(s == goal) return true;
        
        return false;
        
    }
};
