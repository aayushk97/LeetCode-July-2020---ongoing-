class Solution {
public:
    int numIslands(vector<vector<char>>& grid) {
        vector<vector<int>> visited(grid.size(), vector<int>(grid[0].size(), 0));
        
        int count = 0;
        
        for(int i = 0; i < grid.size(); i++){
            for(int j = 0; j < grid[0].size(); j++){
                if(grid[i][j] == '1' && !visited[i][j] ) {
                    DFS(grid, i, j, visited);
                    count++;
                }
            }
        }
        
        return count;
    }
    
    void DFS(vector<vector<char>>&grid, int i, int j, vector<vector<int>>& visited){
        
        if(visited[i][j]) return ;
        //cout<<i<<" "<<j<<endl;
        visited[i][j] = 1;
        
        if(i-1 >= 0 && grid[i-1][j] == '1') DFS(grid, i-1, j, visited);
        if(j-1 >= 0 && grid[i][j-1] == '1') DFS(grid, i, j-1, visited);
        if(j+1 < grid[0].size() && grid[i][j+1] == '1') DFS(grid, i, j+1, visited);
        if(i+1 < grid.size() && grid[i+1][j] == '1') DFS(grid, i+1, j, visited);
        
        return;
        
    }
};
