//Idea is to start from atlantic water and pacific water and visit all nodes that are of height greater or equal than that of water. Then find the intersection of
//cells that are visited from both the pacific and atlantic water and then these are final cells.

class Solution {
public:
    vector<vector<int>> pacificAtlantic(vector<vector<int>>& heights) {
        
        vector<vector<int>> pacificVisited(heights.size(), vector<int>(heights[0].size()));
        
        vector<vector<int>> atlanticVisited(heights.size(), vector<int>(heights[0].size()));
        
        for(int i = 0; i < heights.size(); i++){
            dfs(heights, pacificVisited, i, 0);
            dfs(heights, atlanticVisited, i, heights[0].size()-1);
        }
        
        for(int i = 0; i < heights[0].size(); i++){
            dfs(heights, pacificVisited, 0, i);
            dfs(heights, atlanticVisited,  heights.size()-1, i);
        }
        
        vector<vector<int>> results;
        
        for(int i = 0; i < heights.size(); i++){
            for(int j = 0; j < heights[0].size(); j++){
                if(atlanticVisited[i][j] && pacificVisited[i][j]) results.push_back({i, j});
                
            }
        }
        
        return results;
        
    }
    
    void dfs(vector<vector<int>>& heights, vector<vector<int>>& visited, int i, int j){
        
        if(i < 0 || j < 0 || i >= heights.size() || j >= heights[0].size() || visited[i][j]) return;
        
        visited[i][j] = 1;
        
        if(i + 1 < heights.size() && heights[i+1][j] >= heights[i][j]) dfs(heights, visited, i+1, j);
        if(j + 1 < heights[i].size() && heights[i][j+1] >= heights[i][j]) dfs(heights, visited, i, j+1);
        if(i - 1 >= 0 && heights[i-1][j] >= heights[i][j]) dfs(heights, visited, i-1, j);
        if(j - 1 >= 0 && heights[i][j-1] >= heights[i][j]) dfs(heights, visited, i, j-1);
        
    }
};
