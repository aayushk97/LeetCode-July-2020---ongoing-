class Solution {
public:
    vector<string> letterCombinations(string digits) {
        
        vector<string> letterComb;
        
        if(digits.size() == 0) return letterComb;
        
        vector<string> dToL(10, "");
        
        dToL[2] = "abc"; dToL[3] = "def"; dToL[4] = "ghi"; dToL[5] = "jkl"; dToL[6] = "mno"; dToL[7] = "pqrs"; dToL[8] = "tuv"; dToL[9] = "wxyz";
        
        
        letterC(digits, 0, digits.size()-1, dToL,"", letterComb);
        
        return letterComb;
       
    }
    
    void letterC(string digits, int i, int j, vector<string>& dToL, string curr, vector<string>& letterComb){
        if(i > j){
            letterComb.push_back(curr);
            return;
        }
        //cout<<"current num:"<<digits[i]<<endl;
        string correspondingL = dToL[digits[i] - '0'];
        
        for(int k = 0; k < correspondingL.length(); k++){
            //cout<<"current letter: "<<correspondingL[k]<<endl;
            letterC(digits, i+1, j, dToL, curr+correspondingL[k], letterComb);
        }
    }
};
