class Solution {
public:
    int maxAreaOfIsland(vector<vector<int>>& grid) {
        vector<vector<int>> visited(grid.size(), vector<int>(grid[0].size(), 0));
        
        int max = 0;
        int size = 0;
        
        for(int i = 0; i < grid.size(); i++){
            for(int j = 0; j < grid[0].size(); j++){
                
                if(grid[i][j] && !visited[i][j]) {
                    size = DFS(grid, i, j, visited);
                    if(size > max) max = size;
                }
            }
        
        }
        
        return max;
    }
    
    int DFS(vector<vector<int>>&grid, int i, int j, vector<vector<int>>&visited){
        
        int drow[] = {-1, 0, 1, 0};
        int dcol[] = {0, -1, 0, 1};
        
        int size = 0;
        
        stack<pair<int, int>> st;
        st.push({i, j});
        
        while(!st.empty()){
            
            pair<int, int> curr = st.top();
            st.pop();
            
            int row = curr.first;
            int col = curr.second;
            
            if(visited[row][col]) continue;
            
            visited[row][col] = 1;
            
            size += 1;
            
            for(int i = 0; i < 4; i++){
                int newX = row+drow[i];
                int newY = col+dcol[i];
                
                if(newX >= 0 && newX < grid.size() && newY >= 0 && newY < grid[0].size() && grid[newX][newY]) st.push({newX, newY});
            }
        }
        
        return size;
        
    }
};
