//We implement data structure that parentT which is input vector and stores parent of each nodes. Helps in traversing upwards tree. Then we use child vector to
//store child of each node to traverse downwards.

class LockingTree {
public:
    vector<int> locked;
    vector<int> parentT;
    vector<vector<int>> child;
    
    LockingTree(vector<int>& parent): locked(parent.size(), 0), child(parent.size()) {
        
        for(int i = 0; i < parent.size(); i++) parentT.push_back(parent[i]);
        
        for(int i = 1; i < parent.size(); i++) child[parent[i]].push_back(i);
        
    }
    
    bool lock(int num, int user) {
        if(locked[num] > 0) return false;
        
        locked[num] = user;
        return true;
    }
    
    bool unlock(int num, int user) {
        if(locked[num] == 0) return false;
        
        if(locked[num] == user){
            locked[num] = 0;
            return true;
        } 
        
        return false;
        
    }
    
    bool upgrade(int num, int user) {
        
        if(locked[num] > 0) return false;
        
        int i = num;
        
        if(locked[0] > 0) return false;
        
        while(parentT[i] != -1){
            if(locked[i] > 0) return false;
            i = parentT[i];
        }
        
        int lockD = checkIfLockDesc(num);
        //cout<<"Descendatns were locked? "<<lockD<<endl;
        unlockDownward(num);
        if(!lockD) return false; 
        
        locked[num] = user;
        //unlockAllDec(num);
        
        return true;
    }
    
    bool checkIfLockDesc(int num){
       if(locked[num]) return true;
        
        for(int i = 0; i < child[num].size(); i++){
            if(checkIfLockDesc(child[num][i])) return true;
        }
        
        return false;
    }
    
    void unlockDownward(int num){
        locked[num] = 0;
        
        for(int i = 0; i < child[num].size(); i++){
            unlockDownward(child[num][i]);
        }
    }
   
};
