//We use merge sort kind of approach to find intersections.
//If the current interval in firstList end earlier than start of secondList we increment i to find intersecting intervals.
//If the current interval in secondList end earlier than first element of firstList we increment j to find intersecting intervals.
//Otherwise we have an intersecting interval. Now, to keep the intersection part we find min of start and max of end. Then create this interval and add it to
//result. Then we check which interval was finished i.e, whose end index was used for intersection. We move that list pointer once to find other intersection with
//the interval that has not ended yet.

class Solution {
public:
    vector<vector<int>> intervalIntersection(vector<vector<int>>& firstList, vector<vector<int>>& secondList) {
        
        vector<vector<int>> res;
        
        int i = 0, j = 0;
        int start = -1, end = -1;
        
        while(i < firstList.size() && j < secondList.size()){
            //cout<<i<<" "<<j<<endl;
            if(firstList[i][1] < secondList[j][0]) i++;
            else if(firstList[i][0] > secondList[j][1]) j++;
            else{
                start = max(firstList[i][0], secondList[j][0]);
                end = min(firstList[i][1], secondList[j][1]);
                res.push_back({start, end});
                if(end == firstList[i][1]) i++;
                else j++;
            }
        }
        
        return res;
    }
};
