//we first insert in queue the rotten tomatoes then insert in queue all the neighours of all rotting tomatoes then similary do this for all the next ones.
//Fast breadth first search approach.
//Instead of 2 functions the bottom can be written in 1 function only
//count return number of time to took to rot all -1 as we count the inital time for all rotten nodes as well.

class Solution {
public:
    
    int orangesRotting(vector<vector<int>>& grid) {
        
        int numFresh = 0, count = 0;
        vector<pair<int, int>> rottenPoints;
        for(int i = 0; i < grid.size(); i++){
            for(int j = 0; j < grid[0].size(); j++){
                if(grid[i][j] == 2) rottenPoints.push_back({i, j});
                if(grid[i][j] == 1) numFresh++;
            }
        }
        if(numFresh == 0) return 0;
        //cout<<rottenPoints.size();
        int time = 0;
        vector<vector<int>> visited(grid.size(), vector<int>(grid[0].size(), 0));
        bfs(grid, visited, &numFresh, &count, rottenPoints );
        
        cout<<count<<numFresh<<endl;
        if(numFresh == 0) return count-1;
        else return -1;
    }
    
    void bfs(vector<vector<int>>& grid,vector<vector<int>>& visited, int* numFresh, int* count, vector<pair<int, int>>& rottenPoints){
        
        queue<pair<int, int>> q;
        for(int i = 0; i < rottenPoints.size(); i++) q.push(rottenPoints[i]);
        
        
        while(q.size() > 0){
           
            
            int n = q.size();
            *count = *count + 1;
                       
            for(int i = 0; i < n; i++){
                 pair<int, int> curr = q.front();
                q.pop();
                
               if(visited[curr.first][curr.second]) continue;
                visited[curr.first][curr.second] = 1;
            
            //cout<<curr.first<<" "<<curr.second<<endl;
            if(curr.first -1 >= 0 && grid[curr.first-1][curr.second] == 1 && grid[curr.first-1][curr.second] != 0) {
                q.push({curr.first-1, curr.second});  
                grid[curr.first-1][curr.second] = 2;
                *numFresh = *numFresh -1;
            } 
            
            if(curr.first + 1 < grid.size() && grid[curr.first+1][curr.second] == 1 && grid[curr.first+1][curr.second] != 0){
                q.push({curr.first+1, curr.second});
                grid[curr.first+1][curr.second] = 2;
                *numFresh = *numFresh -1;
            } 
            if(curr.second -1 >= 0 && grid[curr.first][curr.second-1] == 1 && grid[curr.first][curr.second-1] != 0){
                q.push({curr.first, curr.second-1});
                grid[curr.first][curr.second-1] = 2;
                *numFresh = *numFresh -1;
            } 
            if(curr.second + 1 < grid[0].size() && grid[curr.first][curr.second+1] == 1 && grid[curr.first][curr.second+1] != 0) {
                q.push({curr.first, curr.second+1});
                grid[curr.first][curr.second+1] = 2;
                *numFresh = *numFresh -1;
            }
            //cout<<q.size()<<endl;
        }
           } 
            
        
        
    }
};
