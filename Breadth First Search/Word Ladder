//We use BFS to traverse to strings present in the wordList that have dist 1 from currWord by changing each char and checking if after changing if that word is 
present in the list. At which ever height we reach the endWord we return the height.

class Solution {
public:
    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {
        unordered_set<string> words;
        
        for(int i = 0; i < wordList.size(); i++) words.insert(wordList[i]);
        
        queue<string> q;
        q.push(beginWord);
        
        int currLength = 1;
        
        while(q.size() > 0){
            
            int n = q.size();
            
            for(int i = 0; i < n; i++){
                
                string curr = q.front();
                q.pop();
                
                if(curr == endWord) return currLength;
                
                words.erase(curr);
                
                for(int j = 0; j < curr.length(); j++){
                    char currChar = curr[j];
                    for(int k = 0; k < 26; k++){
                        curr[j] = 'a' + k;
                        
                        if(words.find(curr) != words.end()){
                            
                            q.push(curr);
                            
                        }
                    }
                    curr[j] = currChar;
                }
                
                
               
            }
            
            currLength++;
            
        }
        
        return 0;
        
    }
    
};
