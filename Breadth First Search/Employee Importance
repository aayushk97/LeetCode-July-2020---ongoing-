//2 solutions: 1 DFS 2 BFS

class Solution {
public:
    int getImportance(vector<Employee*> employees, int id) {
        
        int sum = 0;
        
        for(int i = 0; i < employees.size(); i++){
            if(employees[i] -> id == id){
                sum += employees[i] -> importance;
                
                for(int j = 0; j < employees[i] -> subordinates.size(); j++) sum += getImportance(employees, employees[i] -> subordinates[j]);
            }
        }
        
        return sum;
    }
    
    
};

class Solution {
public:
    int getImportance(vector<Employee*> employees, int id) {
        Employee* temp =NULL;
        unordered_map<int, Employee*> employeeMap;
        int importance = 0;
        
        for(int i = 0; i < employees.size(); i++)
            employeeMap[employees[i] -> id] = employees[i];
        
        queue<Employee*> q;
        q.push(employeeMap[id]);
        
        while(!q.empty()){
            temp = q.front();
            q.pop();
            
            if(temp -> subordinates.size() > 0){
                for(int i = 0; i < temp -> subordinates.size(); i++){
                    q.push(employeeMap[temp -> subordinates[i]]);
                }
            }
            
            importance += temp -> importance;
        }
        
        return importance;
    }
};
