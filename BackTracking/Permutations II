//We keep a count of chars in a map.
//Then to form permuation we take an element, decrease it's count and recurse. So when it comes back it doesn't use the next same char it goes to the next char.
//Since we are iterating over a map.

class Solution {
public:
    vector<vector<int>> permuteUnique(vector<int>& nums) {
        
        map<char, int> countMap;
        
        for(int i = 0; i < nums.size(); i++){
            countMap[nums[i]]+= 1;
        }
        
        vector<vector<int>> results;
        vector<int> permutation;
        
        createPermutations(nums, permutation, results, countMap);
        
        return results;
    }
    
    void createPermutations(vector<int>& nums, vector<int>& permutation, vector<vector<int>>& results, map<char, int>& countMap){
        
        if(permutation.size() == nums.size()){
            results.push_back(permutation);
            return;
        }
        
        for(auto it = countMap.begin(); it != countMap.end(); it++){
            
            int count = it -> second;
            
            if(count > 0){
                it -> second = it -> second -1; 
                permutation.push_back(it -> first);
                createPermutations(nums, permutation, results, countMap);
                permutation.pop_back();
                it -> second = it -> second + 1;
            }
            
        }
        
        
        
    }
};
