//Check if the char is first symbol of the word, if yes then dfs recurse and find if the string is present.
class Solution {
public:
     bool visited[201][201];
    bool exist(vector<vector<char>>& board, string word) {
        int m = board.size();
        int n = board[0].size();

        
       
        for(int i = 0 ; i < m ; i++){
            for(int j = 0; j < n; j++){
                if(board[i][j] == word[0]){
                    if(checkexist(board, i, j, word,0, m, n)) return true;
                }
                    
            }
        }
        //cout<<"this";
        return false;
    }
    
    bool checkexist(vector<vector<char>> &board, int i, int j, string word, int k, int m, int n){
  
  if(board[i][j]==word[k]){
            visited[i][j] = true;
            if(k == word.length()-1){
                return true;  
            } 
            bool a = false, b = false, c = false, d = false;
            if(j < n-1 && visited[i][j+1] != 1){
              b = checkexist(board,  i, j+1,word, k+1,m,n);
            }
            if(i < m-1 && visited[i+1][j] != 1){
                a = checkexist(board, i+1, j,word, k+1,m,n);            
            }
            
            if(j-1 >= 0 && visited[i][j-1] != 1){
               c = checkexist(board,  i, j-1,word, k+1,m,n);
            }
            if(i-1 >= 0 && visited[i-1][j] != 1){
               d = checkexist(board, i-1, j,word, k+1,m,n);
            }
            if(!(a||b||c||d)) visited[i][j] = false;
            return (a || b || c || d);
        }
        return false;
    }
};
