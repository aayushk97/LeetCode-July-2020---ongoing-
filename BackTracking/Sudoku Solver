//We put a value that can be put in empty slot and then recursively start putting next empty slot. If no value suits this cell then we backtrack to prev entry and try 
//a different number. 
class Solution {
public:
    void solveSudoku(vector<vector<char>>& board) {
        
        vector<vector<int>> colPresent(board.size(), vector<int>(9, 0));
        vector<vector<int>> rowPresent(board.size(), vector<int>(9, 0));
        vector<vector<int>> boxPresent(board.size(), vector<int>(9, 0));
        
        for(int i = 0; i < board.size(); i++){
            for(int j = 0; j < board[i].size(); j++){
                if(board[i][j] == '.') continue;
                int num = board[i][j] - '0' - 1;
                colPresent[i][num] = 1;
                rowPresent[j][num] = 1;
                int boxNum = i / 3 * 3 + j / 3;
                
                colPresent[i][num] = rowPresent[j][num] = boxPresent[boxNum][num] = 1;
            }
        }
        
        fillSudoku(board, colPresent, rowPresent, boxPresent, 0, 0);
        
        
    }
    
    bool fillSudoku(vector<vector<char>>& board, vector<vector<int>>& colPresent, vector<vector<int>>& rowPresent, vector<vector<int>>& boxPresent, int r , int c){
       // cout<<r<<c<<" "<<board[r][c]<<endl;
        bool isCorrect = true;
        for(int i = 0; i < board.size(); i++){
            for(int j = 0; j < board[i].size(); j++){
                if(board[i][j] == '.'){
                    for(int k = 1; k <= 9; k++){
                        if(colPresent[i][k-1] || rowPresent[j][k-1] || boxPresent[i/3*3 + j/3][k-1]) continue;
                        colPresent[i][k-1] = rowPresent[j][k-1] = boxPresent[i/3*3 + j/3][k-1] = 1;
                        board[i][j] = '0'+k;
                        isCorrect = fillSudoku(board, colPresent, rowPresent, boxPresent, i, j);
                        
                        if(isCorrect) return true;
                        
                        colPresent[i][k-1] = rowPresent[j][k-1] = boxPresent[i/3*3 + j/3][k-1] = 0;
                        board[i][j] = '.';
                    }
                    
                    if(board[i][j] == '.') return false;
                   
                }
            }
        }
        
        return true;
        
    }
};
