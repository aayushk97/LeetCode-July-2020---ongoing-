//Similar to 3Sum we first sort the array and then find the sum of triplets and check if it is closest to the target, if yes then make this sum the new closest
//Now same as 3Sum since we have to find the sum closest to target we navigate the way towards the value of target by incremting the index of j if sum is less
//than target otherwise decrement k.

class Solution {
public:
    int threeSumClosest(vector<int>& nums, int target) {
        sort(nums.begin(), nums.end());
        
        int closestSum = INT_MAX;
        int minDiff = INT_MAX;
        int n = nums.size();
        int a = -1, b = -1, c = -1;
        
        for(int i = 0; i < n-2; i++){
            if( i > 0 && nums[i] == nums[i-1]) continue;
            
            int j = i+1, k = nums.size()-1;
            
            while(j < k){
                if(abs(target - (nums[i] + nums[j] + nums[k])) < minDiff){
                    minDiff = abs(target - (nums[i] + nums[j] + nums[k]));
                    closestSum = (nums[i] + nums[j] + nums[k]);
                    
                }
                
                if(nums[i]+nums[j]+nums[k] < target){
                    j++;
                }else k--;
            }
            
            
        }
        
        return closestSum;
    }
};
