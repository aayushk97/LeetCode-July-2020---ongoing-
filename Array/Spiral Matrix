
//My solution was to print the elements and down inside when we are goinng up and hit a point that is below the point that started this loop. We also return 
//if the no of elements in vector is equal to size of matrix.

//A better solution is posted below this solution in which we print an entire circle in one loop. and then decrement the size of matrix.

class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) {
        vector<int> order;
        
        int up = 0;
        int i = 0, j = 0, k = 0;
        while(true){
            
            //cout<<i<<" "<<j<<" "<<k<<endl;
            order.push_back(matrix[i][j]);
            if(order.size() >= matrix.size()*matrix[0].size()) break;
            if(i == k && j < matrix[0].size()-k-1){
                j++;
                up = 0;
            } 
            else if(j == matrix[0].size()-k-1 && i <matrix.size()-k-1){
                i++;
                up = 0;
            } 
            else if(i == matrix.size()-k-1 && j > k){
                j--;
                up = 0;
            } 
            else if(j == k && i > k){
              i--;
                up = 1;
            } 
            
            if(i == k+1 && j == k && up) k++;
        }
        
        return order;
        
    }
};

//Here
class Solution {
    public List<Integer> spiralOrder(int[][] matrix) {
        List<Integer> res = new LinkedList<>(); 
        if (matrix == null || matrix.length == 0) return res;
        int n = matrix.length, m = matrix[0].length;
        int up = 0,  down = n - 1;
        int left = 0, right = m - 1;
        while (res.size() < n * m) {
            for (int j = left; j <= right && res.size() < n * m; j++)
                res.add(matrix[up][j]);
            
            for (int i = up + 1; i <= down - 1 && res.size() < n * m; i++)
                res.add(matrix[i][right]);
                     
            for (int j = right; j >= left && res.size() < n * m; j--)
                res.add(matrix[down][j]);
                        
            for (int i = down - 1; i >= up + 1 && res.size() < n * m; i--) 
                res.add(matrix[i][left]);
                
            left++; right--; up++; down--; 
        }
        return res;
    }
}
