//Similar to next permutation III we first find the number that is smaller to its right neightbour, let it be candidate i. Then we find from right the first
//element that is greater than candidate i. Then we swap these candidates and then we reverse all the numbers after candidate i. 

class Solution {
public:
    void nextPermutation(vector<int>& nums) {
        
        int smaller = -1;
        for(int i = nums.size()-1; i >= 1; i--){
            if(nums[i-1] < nums[i]){
                smaller = i-1;
                break;
            }
        }
        
        if(smaller == -1){
            sort(nums.begin(), nums.end());
            return;
        }
        
        int j = 0;
        int larger = -1;
        
        for(j = nums.size()-1; j >= smaller; j--){
            if(nums[j] > nums[smaller]){
                larger = j;
                break;
            } 
        }
        
        if(larger == -1){
            sort(nums.begin(), nums.end());
            return;
        }
        
        swap(nums[smaller], nums[larger]);
        
        int k = nums.size()-1;
        
        for(int i = smaller+1; i < k; i++, k--){
            swap(nums[i], nums[k]);
        }
        
        return;
        
    }
};
