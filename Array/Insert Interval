//We can either first insert the new interval, then find a place such that its start is greater than the prev interval end and place it there.
//Then we can merge the intersecting intervals int this array and then return the final intervals.
//Or we can do the below, where we first insert all intervals that end before the start of new interval in new array. Then merge all the intersecting intervals 
//then push back remaining intervals.

class Solution {
public:
    vector<vector<int>> insert(vector<vector<int>>& intervals, vector<int>& newInterval) {
        vector<vector<int>> res;
        
        int index = 0;
        
        //we push all the intervals which end earlier than the new inserted interval start
        while(index < intervals.size() && intervals[index][1] < newInterval[0]){
            res.push_back({intervals[index][0], intervals[index][1]});
            index++;
        }
        
        //now we merge the intersecting intervals as newInterval start is not after end of index.
        while(index < intervals.size() && intervals[index][0] <= newInterval[1]){
            newInterval[0] = min(newInterval[0], intervals[index][0]);
            newInterval[1] = max(newInterval[1], intervals[index][1]);
            index++;
        }
        
        res.push_back(newInterval);
        
        while(index < intervals.size()){
            res.push_back({intervals[index][0], intervals[index][1]});
            index++;
        }
        
        return res;
        
    }
};
