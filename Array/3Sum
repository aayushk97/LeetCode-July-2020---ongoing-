//We first sort the array then for each element selected as i we run 2Sum for rest of array to get the reamining element that sum up to 0.
//Here, whenever an index i, j, k is similar to its next element i.e, if nums[i] == nums[i-1] or nums[j] == nums[j+1] or nums[k] == nums[k-1] we ignore the element
//as adding it would result in duplicates so we ignore them.

class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        
        vector<vector<int>> res;
        
        if(nums.size() < 3) return res;
      
        sort(nums.begin(), nums.end());
        
        for(int i = 0; i < nums.size(); i++){
            
            int j = i+1, k = nums.size()-1;
            
            if(i > 0 && nums[i] == nums[i-1]) continue;
            
            int sum = nums[i];
            while(j < k){
                if(sum+nums[j]+nums[k] == 0){
                    res.push_back({nums[i], nums[j], nums[k]});
                    
                    while(j < k && nums[j] == nums[j+1]) j++;
                    while(j < k && nums[k] == nums[k-1]) k--;
                    j++; k--;
                } 
                else if(sum + nums[j] + nums[k] < 0) j++;
                else k--;
            }
            
        }
        
        
        return res;
    }    
};
