//We first assign a number as first lowest which is slow then grater than that we assign a number mid and if a number is greater than mid we have found our
//triplets. Here in case 2 we have to check if it is greater than mid because there are repeating numbers and same number can be assigned to slow and mid.

// Recursive solution formed by taking an element and not taking other element was giving 75/76 test cases passed.

class Solution {
public:
    bool increasingTriplet(vector<int>& nums) {
        if(nums.size() == 1 || nums.size() == 2) return false;
        
        int slow = INT_MAX, mid = INT_MAX;
        
        for(int i = 0; i < nums.size(); i++){
            if(nums[i] > mid){
                cout<<slow<<" "<<mid<<" "<<nums[i]<<endl;
                return true;  
            } 
            
            if(nums[i] < slow){
                slow = nums[i];
            }else if(nums[i] < mid && nums[i] > slow){
                mid = nums[i];
            }
        }
        
        return false;
        
        
    }
    
    
};
