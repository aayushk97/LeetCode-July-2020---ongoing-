//We store  the freq of numbers (only once if both bottom and top are same.) and then store the count of numbers in bottom and top. Now, if a number appers n times,
//then it is our goal to swap the dominoes in such a way that we get this number on one side with min number of swaps. So, this can be found by taking the 
//n - max(count in top, count in bottom).

class Solution {
public:
    int minDominoRotations(vector<int>& tops, vector<int>& bottoms) {
        
        vector<int> freq(7, 0);
        vector<int> freqB(7, 0);
        vector<int> freqT(7, 0);
        for(int i = 0; i < tops.size(); i++){
            if(tops[i] == bottoms[i]) freq[tops[i]]++;
            else {
                freq[tops[i]]++;
                freq[bottoms[i]]++;
            }
            freqB[tops[i]]++;
            freqT[bottoms[i]]++;
        
        }
        
        int n = tops.size();
        
        int minSwaps = INT_MAX;
        for(int i = 1; i < 7; i++){
            //cout<<"Here"<<endl;
            if(freq[i] == n) return n - max(freqB[i], freqT[i]);
        }
        
        return -1;
        
    }
};
