class Solution {
public:
    int maxPerformance(int n, vector<int>& speed, vector<int>& efficiency, int k) {
        
        //we first create a vector of pair so we can sort in decreasing order of efficeincy
        vector<pair<int, int>> SE;
        
        for(int i = 0; i < speed.size(); i++) SE.push_back({efficiency[i], speed[i]});
        
        sort(SE.rbegin(), SE.rend());
        
        //maintain a max PQ to get the minimum speed that was added to sum and remove it.
        priority_queue<int> minSpeed;
        
        long result = 0, speedSum = 0;
        
        for(int i = 0; i < SE.size(); i++){
            bool popped = false;
            int speed = SE[i].second;
            minSpeed.push(-speed);
            
            speedSum += speed;
            
            if(minSpeed.size() > k) {
                //remove the minspeed and subtract it from speedSum
                speedSum += minSpeed.top();
                if(minSpeed.top() == SE[i].first) popped = true;
                
                minSpeed.pop();
                
                
            }
            
            if(!popped) result = max(result, speedSum * SE[i].first);
            
        }
        
        return result % 1000000007;
    }
};
