//So the intuition is, we check from 1 if the num 1 is possible since the array is sorted we check the first index if its value is 1.
//If yess, then we add this number to miss and we have all the numbers from [1,1] now we check for 2, if the second index is 2. If not then we add this number
//and we have covered all the numbers in range 1 to 3. Now, we need to find if 4 is possible, if its not we add 4 and since we alrady know sums of 1,3 is possible
//so 1, 7 is also now possible by adding 4 to each one of them. If there is a number 5 which is less than 8 in nums, we add miss + nums[i] as last miss. As,
//nums till 7 are fullfilled so we can add all of them to 5 to get all numbers in range 1, 12. So, now we look for 13... and so on..

class Solution {
public:
    int minPatches(vector<int>& nums, int n) {
        long miss = 1, numsAdded = 0, i = 0;
        
        while(miss <= n){
            
            if(i < nums.size() && nums[i] <= miss){
                miss += nums[i];
                i++;
                
            }else{
                miss += miss;
                numsAdded++;
            }
            
        }
        
        return numsAdded;
    }
};
