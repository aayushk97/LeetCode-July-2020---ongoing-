//To get min unqiue nos we need to remove unique nos with small frequencies. So we remove suck 'k' nos by storing freq and no in a priority queue and popping out
// to remove them.

class Solution {
public:
    int findLeastNumOfUniqueInts(vector<int>& arr, int k) {
        unordered_map<int, int> count;
        
        for(int i = 0; i < arr.size(); i++){
            count[arr[i]]++;
        }
        
        priority_queue<pair<int, int>> pq;
        
        for(auto it = count.begin(); it != count.end(); it++){
           
            pq.push({-it -> second, it -> first});
        }
        
        while(k--){
            pair<int, int> curr = pq.top();
            pq.pop();
            
            int countPopped = -curr.first;
            if(countPopped-1 > 0) pq.push({-(countPopped-1), curr.second});
            
        }
        
        return pq.size();
    }
};
