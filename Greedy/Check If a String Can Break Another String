//we sort the strings and then check for each element if either s1 can be broken into s2 or vice versa. We skip the same chars in beginning.
//We can do this in same loop by merging the condition and if 1st condition is true or 2nd condition is true return true. if(s1[i] < s2[i]) f1 = false; if(s2[i] < s1[i]) f2 = false;
//return f1 || f2;

class Solution {
public:
    bool checkIfCanBreak(string s1, string s2) {
        sort(s1.begin(), s1.end());
        sort(s2.begin(), s2.end());
        
        int i = 0; 
        while(s1[i] == s2[i]) i++;
        
        //if(i == s1.size()-1) return true;
        
        if(s1[i] >= s2[i]){
            for(int j = i; j < s1.length(); j++){
                if(s1[j] < s2[j]) return false;
            }    
        }else if(s2[0] >= s1[0]){
            for(int j = 1; j < s2.length(); j++){
                if(s2[j] < s1[j]) return false;
            }
        }
        
        return true;
        
    }
};


//Another solution
//We count the freq of characters and check if the string that covers other string should have more count for higher chars, so if it diff goes neg, they
//it doesn't cover the string and we return OR of boht checks.

class Solution {
public:
    bool checkIfCanBreak(string s1, string s2) {
        
        vector<int> freq1(26, 0);
        vector<int> freq2(26, 0);
        
        for(int i = 0; i < s1.length(); i++){
            freq1[s1[i] -'a'] += 1;
            freq2[s2[i] -'a'] += 1;
        }
        
        //now we check if one covers other or vice versa
        return check(freq1, freq2) || check(freq2, freq1);
        
    }
    
    bool check(vector<int>& freq1, vector<int>& freq2){
        
        int diff = 0;
        
        for(int i = 0; i < 26; i++){
            diff += (freq1[i] - freq2[i]);
            
            if(diff < 0) return false;
        }
        return true;
    }
};

