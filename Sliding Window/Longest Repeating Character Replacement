//We find the frequencies of chars in the window and then find the frequent character in this window. Then see if we can change all other characters in window to 
//this most freq char if num of other char is less than or equal to k. If not then we move the left pointer and decrement the freq of removed char from the window.
//We keep track of max window size possible and return that.

class Solution {
public:
    int characterReplacement(string s, int k) {
        vector<int> freq(26, 0);
        
        int mostFreqChar = 0;
        
        int windowSize = 0;
        
        for(int i = 0, j = 0; j < s.length(); j++){
            
            freq[s[j]-'A']++;
            mostFreqChar = max(mostFreqChar, freq[s[j]-'A']);
            
            int charsToReplace = j - i + 1 - mostFreqChar;
            if(charsToReplace > k){
                freq[s[i]-'A']--;
                i++;
            }
            
            windowSize = max(windowSize, j-i+1);
            
        }
        
        return windowSize;
    }
};
