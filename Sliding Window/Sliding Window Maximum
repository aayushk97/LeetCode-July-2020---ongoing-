//We keep track of max element index at point. Then when we move the window we see if the element removed from left pointer is max till that point then we remove it
//To insert an element we insert its index by checking if max till that point is this and all other elements less than this are removed. 

//Concept is simialar to :Longest Continuous Subarray With Absolute Diff Less Than or Equal to Limit

class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        
        vector<int> result;
        
        
        int j = 0;
        
        deque<int> maxElems;
        int maxElem = INT_MIN;
        
        for(j = 0; j < k; j++){
            while(maxElems.size() > 0 && nums[maxElems.back()] <= nums[j]) maxElems.pop_back();
            maxElems.push_back(j);
        }
        
        result.push_back(nums[maxElems.front()]);
        
        if(maxElems.front() == 0) maxElems.pop_front();
        
        for(int i = 1; j < nums.size();i++, j++){
            
            while(maxElems.size() > 0 && nums[maxElems.back()] <= nums[j]) maxElems.pop_back();
            maxElems.push_back(j);
            
            result.push_back(nums[maxElems.front()]);
            //cout<<maxElems.front()<<endl;
            
            if(i == maxElems.front()) maxElems.pop_front();
            
            
        }
        
        return result;
        
        
    }
};
