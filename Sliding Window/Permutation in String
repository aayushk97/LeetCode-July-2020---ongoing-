//Same as finding anagrams of string

class Solution {
public:
    bool checkInclusion(string s1, string s2) {
        
        //find num of chars
        vector<int> chars(26, 0);
        
        for(int i = 0; i < s1.size(); i++){
            chars[s1[i]-'a'] += 1;
        }
        
        int diff = s1.length();
        
        //now we create a window of size s1 length and check if each window is a permutation
        for(int j = 0, i= 0; j < s2.length(); j++){
            
            if(j-i >= s1.length()){
                chars[s2[i] - 'a']++;
                if(chars[s2[i]-'a'] > 0) diff++;
                i++;
            }
            
            chars[s2[j]-'a']--;
            if(chars[s2[j]-'a'] >= 0) diff--;
            
            if(diff == 0) return true;
            
            
            
        }
        
        return false;
        
    }
};
