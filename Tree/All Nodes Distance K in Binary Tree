//We create a graph by storing back edges or parent nodes of each node then from the target node we perform dfs to find all the nodes at dist k.
//Method 2: We can store the path from root to target and the distance of each node in path from target. Then we return to main and then dfs using this stored values
//so if any node in path is visited we use the distance and travel down its nodes to find if there is any node at dist i such that dist+i = k.
//so target node has dist 0 its children at dist k can be found, now its parents dist from this node we know, so we can traverse down their and find nodes at dist+i=k.
//https://leetcode.com/problems/all-nodes-distance-k-in-binary-tree/discuss/143798/1ms-beat-100-simple-Java-dfs-with(without)-hashmap-including-explanation

class Solution {
public:
    vector<int> distanceK(TreeNode* root, TreeNode* target, int k) {
        unordered_map<TreeNode*, TreeNode*> parent;
        
        TreeNode* targetNode = dfs(root, target, parent, NULL);
        
        unordered_map<TreeNode*, int> dist;
        
        vector<int> result;
        
        dfsDist(targetNode, k, parent, result, dist);
        
        return result;
        
    }
    
    TreeNode* dfs(TreeNode* root, TreeNode* target, unordered_map<TreeNode*, TreeNode*>& parent, TreeNode* parentNode){
        if(!root) return NULL;
        
        parent[root] = parentNode;
        
        parentNode = root;
        
        TreeNode* left = dfs(root -> left, target, parent, parentNode);
        TreeNode* right = dfs(root -> right, target, parent, parentNode);
        
        if(left) return left;
        if(right) return right;
        if(root -> val == target -> val) return root;
        return NULL;
    }
    
    void dfsDist(TreeNode* root, int k, unordered_map<TreeNode*, TreeNode*>& parent, vector<int>& result, unordered_map<TreeNode*, int>& dist){
        
        if(!root || dist.find(root) != dist.end()) return;
        //cout<<root -> val<<endl;
        if(k == 0){
            result.push_back(root -> val);
            return;
        }
        dist[root] = 1;
        
        dfsDist(root -> left, k-1, parent, result, dist);
        dfsDist(root -> right, k-1, parent, result, dist);
        dfsDist(parent[root], k-1, parent, result, dist);
    }
};
