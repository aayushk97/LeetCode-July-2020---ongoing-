/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> pathSum(TreeNode* root, int targetSum) {
        
        vector<vector<int>> allPaths;
        if(!root) return allPaths;
        vector<int> paths;
        
        findAllPaths(root, targetSum, allPaths, paths);
        return allPaths;
        
    }
    
    void findAllPaths(TreeNode* root, int targetSum, vector<vector<int>>& allPaths, vector<int>& paths){
        
        //cout<<root -> val;
        paths.push_back(root -> val);
        if(!root -> left && !root -> right && root -> val == targetSum ){
            allPaths.push_back(paths);
            paths.pop_back();
            return;
        }
        
        if(root -> left)findAllPaths(root -> left, targetSum - root -> val, allPaths, paths);
        if(root -> right)findAllPaths(root -> right, targetSum - root -> val, allPaths, paths);
        //cout<<"back: "<<root -> val<<"back: "<<paths[paths.size()-1]<<endl;
        paths.pop_back();
    }
};
