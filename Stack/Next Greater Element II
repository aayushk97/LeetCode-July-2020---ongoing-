//1. We can for each element find the next greater element in a circular mananer but it will take O(n^2) time.


class Solution {
public:
    vector<int> nextGreaterElements(vector<int>& nums) {
        
        vector<int> nextG(nums.size(), -1);
        
        for(int i = 0; i < nums.size(); i++){
            nextG[i] = findNextG(nums, i);
        }
        
        return nextG;
    }
    
    int findNextG(vector<int>& nums, int i){
        int k = (i + 1)%nums.size();
        
        while(k != i){
            if(nums[k] > nums[i]) return nums[k];
            
            k = (k + 1)%nums.size();
        }
        
        return -1;
    }
};

//2. Using stacks: O(n)
//Here we go 2 time around the array so we can find next greater of circular array.
//Now, here we store index of each element on top of stack and then if an element that is greater than top of stack comes in then we put this element as
//next greater of top of stack and pop the stack and then push this element index in stack.
//If not understood, trace it on [1,2,3,4,3].

class Solution {
public:
    vector<int> nextGreaterElements(vector<int>& nums) {
        
        int n = nums.size();
        
        vector<int> res(nums.size(), -1);
        stack<int> st;
        
        for(int i = 0; i < 2*n; i++){
            
            while(st.size() && nums[st.top()] < nums[i%n]){
                res[st.top()] = nums[i%n];
                st.pop();
            }
            
            st.push(i%n);
            
        }
        
        return res;
        
    }
};
