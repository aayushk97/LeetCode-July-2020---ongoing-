//From the input string we first remove all the balanced parenthesis and then from remaining we return ceil(m/2) where m is number of parenthesis pairs. Simce, 
//when we have for ex 2 unbalanced pairs we need only 1 swap to make them balanced i.e, ]][[ are the only forms of unbalnced parenthesis remaining after removing
//balanced parenthesis, here we can 0 and 2 to make prenthesis balanced.

class Solution {
public:
    int minSwaps(string s) {
        
        int swaps = INT_MAX;
        unordered_map<string, int> allParen;
        
        string finalUnB = removeBalanced(s);
        
       
        int n = finalUnB.length();
        int numPairs = n / 2;
        swaps = ceil((double)numPairs/2);
        
        return swaps;
    }
  
    
    string removeBalanced(string &s){
        string res = "";
        
        for(int i = 0; i < s.length(); i++){
            if(res.size() == 0) res.push_back(s[i]);
            else if(res.back() == '[' && s[i] == ']') res.pop_back();
            else res.push_back(s[i]);
            
        } 
        return res;
    }
};
