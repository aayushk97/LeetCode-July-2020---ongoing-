class Solution {
public:
    vector<int> kWeakestRows(vector<vector<int>>& mat, int k) {
        vector<int> noOfSoldiers;
        int pos = -1;
        for(int i = 0; i < mat.size(); i++){
            
            pos = binarySearch(mat[i], 0, mat[0].size()-1);
            cout<<pos;    
            noOfSoldiers.push_back(pos+1);
        }
        
        int index = -1;
        
        for(int i = 0; i < k; i++){
            int min = INT_MAX;
            for(int j = 0; j < noOfSoldiers.size(); j++){
                if(noOfSoldiers[j] < min && noOfSoldiers[j] != -1){
                    index = j;
                    min = noOfSoldiers[j];
                }
            }
            noOfSoldiers[index] = -1;
            indexes.push_back(index);
            }
        
        return indexes;
    }
    
    int binarySearch(vector<int>& mat, int l, int r){
        int pos = -1;
        int mid;
        if(l<r){
            mid = l+(r-l)/2;
            if(mat[mid] == 1 && mat[mid+1] == 0) return mid;
            else if(mat[mid] == 1 && mat[mid+1] ==1) pos = binarySearch(mat, mid+1, r);
            else pos = binarySearch(mat, l, mid - 1);
        }else if(l == r && mat[mid] == 1) pos = r;
         else if(l == r && mat[mid] == 0) pos = -1;
        
        return pos;
    }
    
};
