//We can either use binary search to find an index of element then linearly find all the index left and right to it. O(logN + k) where k is no of duplicate elements.

//We can use binary search to find the left boundary and then binary search right boundary. Total time : O(logN)
https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/
class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        
        if(nums.size() == 0) return {-1, -1};
        
        int i = 0, j = nums.size()-1;
        
        while(i < j){
            int mid = i + (j-i)/2;
            
            if(nums[mid] < target) i = mid +1;
            else j = mid;
        }
        //cout<<i<<endl;
        if(nums[i] != target) return {-1,-1};
        
        int left = i;
        
        i = 0; j = nums.size()-1;
        while(i < j){
            int mid  = i + (j-i)/2 + 1;
            
            if(nums[mid] > target) j = mid-1;
            else i = mid;
        }
        
        if(nums[i] != target) return {-1, -1};
        int right = i;
        
        return {left, right};
        
    }
};
