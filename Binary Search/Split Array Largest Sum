//Similar to question of "Capacity To Ship Packages Within D Days [Medium]" we first find the min sum size that will be the largest element in the array and 
// max sum that will be the sum of entire array and then we perform binary search, if that particular size can be used to create atmost m groups, if not then we 
// increase size of window, else we keep of decreasing it untill we reach an i that is max we can use and return that.

class Solution {
public:
    int splitArray(vector<int>& nums, int m) {
        
        int maxElement = INT_MIN;
        int sum = 0;
        for(int i = 0; i < nums.size(); i++){ 
            maxElement = max(nums[i], maxElement);
            sum += nums[i];
            
        } 
        int i = maxElement, j = sum;
        
        while(i < j){
            
            int mid = i + (j - i)/2;
            
            if(possibleSize(mid, nums, m)) j = mid;
            else i = mid + 1;
            
        }
        
        return i;
        
        
    }
    
    bool possibleSize(int mid, vector<int>& nums, int k){
        
        int size = 0;
        int count = 0;
        for(int i = 0; i < nums.size(); i++){
            
            size += nums[i];
            
            if(size > mid){
                size = nums[i];
                count++;
            }
            
        }
        
        count++;
        
        if(count <= k) return true;
        else return false;
        
        
    }
};
