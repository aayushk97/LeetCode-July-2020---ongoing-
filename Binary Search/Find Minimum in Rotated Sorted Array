// We use binary search. A tip would be to create a sorted array and see all possible rotations and what conditions are followed.

class Solution {
public:
    int findMin(vector<int>& nums) {
      
        int left = 0, right = nums.size()-1;
        
        while(left <= right){
            
            if(left == right) return nums[left];
            if(left + 1 == right) return min(nums[left], nums[right]);
            
            int mid = left + (right - left)/2;
            
            if(nums[mid] < nums[right]){
                right = mid;
            }else if(nums[mid] < nums[left] && nums[mid] < nums[right]){
                right = mid;
            }else if(nums[mid] > nums[left] && nums[mid] > nums[right]){
                left = mid;
            }
            
        }
        
        return -1;
    }
    
};

// A BASIC VERSION
class Solution {
public:
    int findMin(vector<int> &num) {
        int low = 0, high = num.size() - 1;
        // loop invariant: 1. low < high
        //                 2. mid != high and thus A[mid] != A[high] (no duplicate exists)
        //                 3. minimum is between [low, high]
        // The proof that the loop will exit: after each iteration either the 'high' decreases
        // or the 'low' increases, so the interval [low, high] will always shrink.
        while (low < high) {
            auto mid = low + (high - low) / 2;
            if (num[mid] < num[high])
                // the mininum is in the left part
                high = mid;
            else if (num[mid] > num[high])
                // the mininum is in the right part
                low = mid + 1;
        }

        return num[low];
    }
};

//Most basic version, here we compare to right most element, if its more than it there is a min element in between so we increment i, otherwise it will either
//be the min element or there is min element to left of it. So, we set j = mid;
class Solution {
public:
    int findMin(vector<int>& nums) {
        int i = 0, j = nums.size()-1;
        
        while(i < j){
            int mid = i + (j-i)/2;
            
            if(nums[mid] > nums[j]) i = mid + 1;
            else j = mid;
        }
        
        return nums[i];
    }
};
