//Here we check if the mid element is the peak if not then we check if it is smaller than right. As it is smaller than right then in right there has to be a point
//from where the seq will decrease or the end point will be the peak.
//Else if left of mid is greater than we go left to find a point where it has to decrease.

class Solution {
public:
    int findPeakElement(vector<int>& nums) {
        
        if(nums.size() == 1) return 0;
        
        int i = 0, j = nums.size()-1;
        
        while(i <= j){
            
            int mid = i + (j - i)/2;
             if(mid == 0 && nums[mid] > nums[mid+1]) return mid;
            if(mid == nums.size()-1 && nums[mid] > nums[mid-1]) return mid; 
            
            if(mid+1 < nums.size() && nums[mid] > nums[mid+1] && mid-1 >= 0 && nums[mid] > nums[mid-1]) return mid;
            else if(nums[mid] <nums[mid+1]) i = mid + 1;
            else j = mid -1;
        }
        return -1;
    }
};


//Also works :
int findPeakElement(const vector<int> &num) {
    if (num.size() <= 1) return 0;
    int mid = 0, l = 0, h = num.size() - 1;
    
    while (l < h) {
        mid = (l + h) / 2;
        if (num[mid] > num[mid + 1])
            h = mid;
        else if (num[mid] < num[mid + 1])
            l = mid + 1;
    }
    
    return l;
}
