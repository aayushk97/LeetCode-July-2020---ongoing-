class MyCircularDeque {
public:
    int front, rear;
    int *arr, size;
    /** Initialize your data structure here. Set the size of the deque to be k. */
    MyCircularDeque(int k) {
        front = rear = -1;
        size = k;
        arr = new int[size];
    }
    
    /** Adds an item at the front of Deque. Return true if the operation is successful. */
    bool insertFront(int value) {
        if(isFull()){
            return false;
        }else if(front == -1){
            front = rear = 0;
        }else if(front == 0){
            front = size - 1;
        }else {
            front = front - 1;
        }
        arr[front] = value;
        cout<<"front: "<<front;
        return true;
    }
    
    /** Adds an item at the rear of Deque. Return true if if(the operation is successful. */
    bool insertLast(int value) {
        if(isFull()){
            return false;
        }else if(front == -1){
            rear = front = 0;
        }else if(rear == size - 1){
            rear = 0;
        }else{
            rear = rear + 1;
        }
        arr[rear] = value;
        cout<<"rear: "<<rear;
        return true;
    }
    
    /** Deletes an item from the front of Deque. Return true if the operation is successful. */
    bool deleteFront() {
        if(isEmpty()){
            return false;
        }else if(front == rear){
            front = rear = -1;
        }else if(front == size-1){
            
            front = 0;
        }else {
            front = front + 1;
        }
        cout<<"front: "<<front;
        return true;
    }
    
    /** Deletes an item from the rear of Deque. Return true if the operation is successful. */
    bool deleteLast() {
        if(isEmpty()){
            return false;
        }else if(front == rear){
            front = rear = -1;
        }else if(rear == 0){
            rear = size - 1; 
        }else {
            rear = rear - 1;
        }
        cout<<"rear: "<<rear;
        return true;
    }
    
    /** Get the front item from the deque. */
    int getFront() {
        if(isEmpty()){
            return -1;
        }
        return arr[front];
    }
    
    /** Get the last item from the deque. */
    int getRear() {
        if(isEmpty()){
            return -1;
        }
        return arr[rear];
    }
    
    /** Checks whether the circular deque is empty or not. */
    bool isEmpty() {
        return front == -1;
    }
    
    /** Checks whether the circular deque is full or not. */
    bool isFull() {
        return (front == 0 && rear == size - 1) || (front == rear + 1);
    }
};
