class Solution {
public:
    bool isPalindrome(ListNode* head) {
        
        if(!head) return true;
        if(!head -> next) return true;
        
        ListNode* slow = head;
        ListNode* fast = head;
        
        //Find Mid
        while(fast-> next && fast -> next -> next){
            slow = slow -> next;
            fast = fast -> next -> next;
        }
        
        //Reverse the second Half of Linked List
        ListNode* second = ReverseLinkList(slow -> next);
        slow -> next = NULL;
        
        ListNode* first = head;
        
        //Cmpare the elements of first and second linkedlist
        while(first && second){
            if(first -> val != second -> val)
                return false;
            first = first -> next;
            second = second ->next;
        }
        return true;

    }
    
    ListNode* ReverseLinkList(ListNode* head){
        
        if(!head) return NULL;
        
        if(!head -> next) return head;
        
        ListNode* secondNode = head -> next;
        head -> next = NULL;
        
        ListNode *reverse = ReverseLinkList(secondNode);
        
        secondNode -> next = head;
        
        return reverse;
    }
};
