//We create a min heap by inseting neagtive of sum. Now for each popped element we take its index and get the next element in the array inside the min heap.
//There is one condition that needs to be looked at inorder to avoid duplicates after i,j it can reach i+1 , j + 1 twice. So, we set the condition of i == 0, 
//so it reaches only once.

class Solution {
public:
    vector<vector<int>> kSmallestPairs(vector<int>& nums1, vector<int>& nums2, int k) {
     
        priority_queue<pair<int, vector<int>>> pq;
        
        pq.push({-(nums1[0] + nums2[0]), {0, 0}});
        
        vector<vector<int>> result;
        
        while(k > 0 && pq.size() > 0){
            
            int i = pq.top().second[0];
            int j = pq.top().second[1];
            
            
            result.push_back({nums1[i], nums2[j]});
            pq.pop();
            
            if(i + 1 < nums1.size()) pq.push({-(nums1[i+1]+ nums2[j]), {i + 1, j}});
            if(i == 0 && j + 1 < nums2.size()) pq.push({-(nums1[i] + nums2[j+1]), {i, j+1}});
            
            k--;
        }
        
        return result;
    }
};
