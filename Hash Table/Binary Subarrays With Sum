//We keep on calculating the prefix sum and at a point check if prefSun - goal is present is hashmap and add it's count to finalCount at index i, then we incerement
//i and do the same at this point. Similar to problem: https://leetcode.com/problems/subarray-sum-equals-k/
// We can also do this using sliding window protocol.

class Solution {
public:
    int numSubarraysWithSum(vector<int>& nums, int goal) {
        
        unordered_map<int, int> count;
        
        count[0]++;
        int c = 0;
        
        int prefSum = 0;
        
        for(int i = 0; i < nums.size(); i++){
            prefSum += nums[i];
            c += count[prefSum-goal];
            count[prefSum]++;
        }
        
        return c;
        
    }
};


//Using Sliding Window Protocol, we find number of windows that sum up to atmost S and subtract it with number of windows that sum up to atmost S-1, to get
//number of windows of sum S.

    int numSubarraysWithSum(vector<int>& A, int S) {
        return atMost(A, S) - atMost(A, S - 1);
    }

    int atMost(vector<int>& A, int S) {
        if (S < 0) return 0;
        int res = 0, i = 0, n = A.size();
        for (int j = 0; j < n; j++) {
            S -= A[j];
            while (S < 0)
                S += A[i++];
            res += j - i + 1;
        }
        return res;
    }
