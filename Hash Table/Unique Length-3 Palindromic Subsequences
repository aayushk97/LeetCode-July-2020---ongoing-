//We first find the count, the first index at which a char appears and last index. Then we count the number of unqiue chars in between these 2 which will be
//no of palindrome subsequences possible for this char. We only do this if the count of char is >= 2 otherwise the char cannot be present at end points.

class Solution {
public:
    int countPalindromicSubsequence(string s) {
        
        vector<vector<int>> freq(26, vector<int>(3, INT_MIN));
        
        for(int i = 0; i < s.length(); i++){
            if(freq[s[i] - 'a'][0] == INT_MIN) {
                freq[s[i] - 'a'][1] = i;
                freq[s[i]-'a'][0] = 1;
            }else{
                freq[s[i] - 'a'][0] += 1;
                freq[s[i]-'a'][2] = i;    
            }
            
            
        }
        /*
        for(int i = 0; i < freq.size(); i++){
            cout<<freq[i][0]<<" "<<freq[i][1]<<" "<<freq[i][2]<<endl;
        }*/
        
        int count = 0;
        for(int i = 0; i < freq.size(); i++){
            
            if(freq[i][0] <= 1) continue;
            
            unordered_set<char> between;
            
            for(int k = freq[i][1]+1; k < freq[i][2]; k++){
                between.insert(s[k]);
            }
            
            count += between.size();
            //cout<<count<<endl;
        }
        
        return count;
        
    }
};
