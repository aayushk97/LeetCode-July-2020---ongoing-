//Just find the max and create the root with that value and create LST with elements in left of it and RST with element on right of it.
class Solution {
public:
    TreeNode* constructMaximumBinaryTree(vector<int>& nums) {
        
        return constructTree(nums, 0, nums.size()-1);
        
    }
    
    TreeNode* constructTree(vector<int>& nums, int i, int j){
        
        if(i > j) return NULL;
        
        TreeNode* root = new TreeNode();
        int maxVal = INT_MIN, index = -1;
        
        for(int k = i; k <=j; k++){
            
            if(maxVal < nums[k]){
                maxVal = nums[k];
                index = k;
            }
            
        }
        
        root -> val = maxVal;
        root -> left = constructTree(nums, i, index-1);
        root -> right = constructTree(nums, index+1, j);
        
        return root;
    }
};
