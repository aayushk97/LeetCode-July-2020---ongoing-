//Best solution found is to iterate how many every times and keep increasing the candies and assigning candies by mod of iteration number O(sqrt(n))
//Mine is similar complexity but larger code at below
vector<int> distributeCandies(int candies, int n) {
        vector<int> res(n);
        for (int i = 0; candies > 0; ++i) {
            res[i % n] += min(candies, i + 1);
            candies -= i + 1;
        }
        return res;
    }
    
//My solution    
class Solution {
public:
    vector<int> distributeCandies(int candies, int num_people) {
        vector<int> people(num_people, 0);
        int j = 0;
        int i = 0;
        while(candies > 0){
            if(j == num_people){ 
                j = 0;
                i += num_people;
            }
            if(candies - j - i - 1 >= 0 ){
                people[j] += j + i + 1;
                candies -= (j+ i + 1);
            }
                
            else{
                people[j] += candies;
                candies = 0;
            }
            
            j++;    
        }
        
        return people;
    }
};
