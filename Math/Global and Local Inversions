//We can find local Inversions and global inversions and then see if they are equal as below but it leads to TLE.
//So, here since the range of numbers if from 0 to n-1, we have to check if a number is not in index i then it must be at i-1 for it to be a local inversion 
//and for local inversion to be equal to global inversion. Code at last.


class Solution {
public:
    bool isIdealPermutation(vector<int>& nums) {
        
        int localI = 0;
        
        for(int i = 0; i < nums.size()-1; i++){
            if(nums[i] > nums[i+1]) localI++;
        }
        
        int globalI = mergeSort(nums, 0, nums.size()-1);
        cout<<"Here: "<<localI<<" "<<globalI<<endl;
        return localI==globalI;
        
    }
    
    int mergeSort(vector<int>& nums, int i, int j){
        if(i >= j) return 0;
        
        int mid = i + (j-i)/2;
        
        int inversion = 0;
       
        inversion += mergeSort(nums, i, mid);
        
        inversion += mergeSort(nums, mid+1, j);
        
        
        inversion += merge(nums, i, mid, j);
        //cout<<i<<" "<<mid<<" "<<j<<" "<<inversion<<endl;
        return inversion;
    }
    
    int merge(vector<int>& nums, int left, int mid, int right){
        
        vector<int> tempLeft;
        vector<int> tempRight;
        for(int i = left; i <= mid; i++) tempLeft.push_back(nums[i]);
        for(int i = mid+1; i <= right; i++) tempRight.push_back(nums[i]);
        
        int i = 0, j = 0, k = left;
        
        int numInversion = 0;
        
        while(i < tempLeft.size() && j < tempRight.size()){
            if(tempLeft[i] <= tempRight[j]){
                nums[k++] = tempLeft[i++];
            }else{
                nums[k++] = tempRight[j++];
                numInversion += (mid-left-i+1);
            }        
        }
        
       while(i < tempLeft.size()) nums[k++] = tempLeft[i++]; 
       while(j < tempRight.size()) nums[k++] = tempRight[j++]; 
        
        return numInversion;
    }
};

//==========================SOL2
class Solution {
public:
    bool isIdealPermutation(vector<int>& nums) {
        
        for(int i = 0; i < nums.size(); i++){
            if(abs(nums[i]-i) > 1) return false;
        }
        
        return true;
        
    }
};
